# graph/schema.graphqls

"""
Represents a user in the system.
"""
type User {
  id: ID!
  name: String!
  discordID: String!
  tagNumber: Int
  rounds: [Round!]! # Ensure this is a non-nullable list of non-nullable Round
  role: String! # Fixed capitalization to match Go conventions
}

"""
Represents a round of play.
"""
type Round {
  id: ID!
  title: String! # Title of the round
  location: String!
  eventType: String # Make this nullable if it can be omitted
  date: String! # Date in a standard format
  time: String! # Time in a standard format
  participants: [Participant!]! # Non-nullable list of non-nullable Participant
  scores: [Score!]! # Non-nullable list of non-nullable Score
  finalized: Boolean! # Indicates if the round is finalized
  editHistory: [EditLog!]! # Non-nullable list of non-nullable EditLog
  creatorID: String! # Add this line to include the creator ID
}

"""
Represents a participant's response in a round.
"""
type Participant {
  user: User! # Non-nullable User
  response: Response! # Non-nullable Response
  rank: Int! # Non-nullable rank field
}

"""
Represents the response of a participant.
"""
enum Response {
  ACCEPT
  TENTATIVE
  DECLINE
}

"""
Represents a log entry for edits made to a round.
"""
type EditLog {
  editorID: String! # Non-nullable editor ID
  timestamp: String! # Non-nullable timestamp
  changes: String! # Non-nullable changes
}

"""
Represents a location for a round.
"""
type Location {
  id: ID!
  course: String!
  address: String
  city: String
}

"""
Represents a tag associated with a user.
"""
type Tag {
  id: ID!
  tagNumber: Int
  lastPlayed: String! # Non-nullable last played date
  durationHeld: Int # Nullable duration held
  name: String! # Non-nullable name
  position: Int! # Non-nullable position
}

"""
Represents a score for a user in a round.
"""
type Score {
  userID: ID! # Non-nullable user ID
  score: Int! # Non-nullable score
}

"""
Represents the leaderboard of users and their placements.
"""
type Leaderboard {
  users: [User!]! # Non-nullable list of non-nullable User
  placements: [Tag!]! # Non-nullable list of non-nullable Tag
}

"""
Queries available in the API.
"""
type Query {
  getUser(discordID: String!): User
  getLeaderboard: Leaderboard
  getRounds(limit: Int, offset: Int): [Round!]! # Non-nullable list of non-nullable Round
  getUserScore(userID: String!): Int
}

"""
Mutations available in the API.
"""
type Mutation {
  createUser(input: UserInput!): User! # Non-nullable User
  scheduleRound(input: RoundInput!): Round! # Non-nullable Round
  joinRound(input: JoinRoundInput!): Round! # Non-nullable Round
  submitScore(roundID: ID!, userID: ID!, score: Int!): Round! # Non-nullable Round
  finalizeRound(roundID: ID!): Round! # Non-nullable Round
  editRound(roundID: ID!, input: RoundInput!): Round! # Non-nullable Round
  deleteRound(roundID: ID!): Boolean! # Non-nullable Boolean
}

"""
Input type for joining a round.
"""
input JoinRoundInput {
  roundID: ID! # Non-nullable round ID
  userID: ID! # Non-nullable user ID
  response: Response! # Non-nullable response
}

"""
Input type for creating a new user.
"""
input UserInput {
  name: String! # Non-nullable name
  discordID: String! # Non-nullable discord ID
}

"""
Input type for scheduling a new round.
"""
input RoundInput {
  title: String! # Non-nullable title
  location: String! # Non-nullable location
  eventType: String # Nullable event type
  date: String! # Non-nullable date
  time: String! # Non-nullable time
}

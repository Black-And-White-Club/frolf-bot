// Code generated by MockGen. DO NOT EDIT.
// Source: app/events/eventbus.go
//
// Generated by this command:
//
//	mockgen -source=app/events/eventbus.go -destination=app/events/mocks/mock_eventbus.go -package=mocks tcr-bot
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	events "github.com/Black-And-White-Club/tcr-bot/app/events"
	types "github.com/Black-And-White-Club/tcr-bot/app/types"
	gomock "go.uber.org/mock/gomock"
)

// MockEventBus is a mock of EventBus interface.
type MockEventBus struct {
	ctrl     *gomock.Controller
	recorder *MockEventBusMockRecorder
	isgomock struct{}
}

// MockEventBusMockRecorder is the mock recorder for MockEventBus.
type MockEventBusMockRecorder struct {
	mock *MockEventBus
}

// NewMockEventBus creates a new mock instance.
func NewMockEventBus(ctrl *gomock.Controller) *MockEventBus {
	mock := &MockEventBus{ctrl: ctrl}
	mock.recorder = &MockEventBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBus) EXPECT() *MockEventBusMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockEventBus) Publish(ctx context.Context, eventType events.EventType, msg types.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, eventType, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockEventBusMockRecorder) Publish(ctx, eventType, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventBus)(nil).Publish), ctx, eventType, msg)
}

// PublishWithMetadata mocks base method.
func (m *MockEventBus) PublishWithMetadata(ctx context.Context, eventType events.EventType, msg types.Message, metadata map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishWithMetadata", ctx, eventType, msg, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWithMetadata indicates an expected call of PublishWithMetadata.
func (mr *MockEventBusMockRecorder) PublishWithMetadata(ctx, eventType, msg, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithMetadata", reflect.TypeOf((*MockEventBus)(nil).PublishWithMetadata), ctx, eventType, msg, metadata)
}

// RegisterMiddleware mocks base method.
func (m *MockEventBus) RegisterMiddleware(middleware events.MiddlewareFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterMiddleware", middleware)
}

// RegisterMiddleware indicates an expected call of RegisterMiddleware.
func (mr *MockEventBusMockRecorder) RegisterMiddleware(middleware any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMiddleware", reflect.TypeOf((*MockEventBus)(nil).RegisterMiddleware), middleware)
}

// RegisterNotFoundHandler mocks base method.
func (m *MockEventBus) RegisterNotFoundHandler(handler func(events.EventType) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterNotFoundHandler", handler)
}

// RegisterNotFoundHandler indicates an expected call of RegisterNotFoundHandler.
func (mr *MockEventBusMockRecorder) RegisterNotFoundHandler(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNotFoundHandler", reflect.TypeOf((*MockEventBus)(nil).RegisterNotFoundHandler), handler)
}

// Start mocks base method.
func (m *MockEventBus) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockEventBusMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEventBus)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockEventBus) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockEventBusMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockEventBus)(nil).Stop), ctx)
}

// Subscribe mocks base method.
func (m *MockEventBus) Subscribe(ctx context.Context, topic string, handler func(context.Context, types.Message) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, topic, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockEventBusMockRecorder) Subscribe(ctx, topic, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEventBus)(nil).Subscribe), ctx, topic, handler)
}

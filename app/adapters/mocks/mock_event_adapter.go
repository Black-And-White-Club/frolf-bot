// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/adapters/event_adapter.go
//
// Generated by this command:
//
//	mockgen -source=./app/adapters/event_adapter.go -destination=./app/adapters/mocks/mock_event_adapter.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	shared "github.com/Black-And-White-Club/tcr-bot/app/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockEventAdapterInterface is a mock of EventAdapterInterface interface.
type MockEventAdapterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEventAdapterInterfaceMockRecorder
	isgomock struct{}
}

// MockEventAdapterInterfaceMockRecorder is the mock recorder for MockEventAdapterInterface.
type MockEventAdapterInterfaceMockRecorder struct {
	mock *MockEventAdapterInterface
}

// NewMockEventAdapterInterface creates a new mock instance.
func NewMockEventAdapterInterface(ctrl *gomock.Controller) *MockEventAdapterInterface {
	mock := &MockEventAdapterInterface{ctrl: ctrl}
	mock.recorder = &MockEventAdapterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventAdapterInterface) EXPECT() *MockEventAdapterInterfaceMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockEventAdapterInterface) Publish(ctx context.Context, eventType shared.EventType, msg shared.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, eventType, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockEventAdapterInterfaceMockRecorder) Publish(ctx, eventType, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventAdapterInterface)(nil).Publish), ctx, eventType, msg)
}

// Subscribe mocks base method.
func (m *MockEventAdapterInterface) Subscribe(ctx context.Context, eventType shared.EventType, handler func(*shared.Message) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, eventType, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockEventAdapterInterfaceMockRecorder) Subscribe(ctx, eventType, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEventAdapterInterface)(nil).Subscribe), ctx, eventType, handler)
}

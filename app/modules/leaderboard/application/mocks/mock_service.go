// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/leaderboard/application/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/leaderboard/application/interface.go -destination=./app/modules/leaderboard/application/mocks/mock_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	leaderboardevents "github.com/Black-And-White-Club/tcr-bot/app/modules/leaderboard/domain/events"
	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetLeaderboardRequest mocks base method.
func (m *MockService) GetLeaderboardRequest(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaderboardRequest", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLeaderboardRequest indicates an expected call of GetLeaderboardRequest.
func (mr *MockServiceMockRecorder) GetLeaderboardRequest(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaderboardRequest", reflect.TypeOf((*MockService)(nil).GetLeaderboardRequest), ctx, msg)
}

// GetTagByDiscordIDRequest mocks base method.
func (m *MockService) GetTagByDiscordIDRequest(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByDiscordIDRequest", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTagByDiscordIDRequest indicates an expected call of GetTagByDiscordIDRequest.
func (mr *MockServiceMockRecorder) GetTagByDiscordIDRequest(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByDiscordIDRequest", reflect.TypeOf((*MockService)(nil).GetTagByDiscordIDRequest), ctx, msg)
}

// LeaderboardUpdateRequested mocks base method.
func (m *MockService) LeaderboardUpdateRequested(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaderboardUpdateRequested", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaderboardUpdateRequested indicates an expected call of LeaderboardUpdateRequested.
func (mr *MockServiceMockRecorder) LeaderboardUpdateRequested(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaderboardUpdateRequested", reflect.TypeOf((*MockService)(nil).LeaderboardUpdateRequested), ctx, msg)
}

// PublishTagAvailable mocks base method.
func (m *MockService) PublishTagAvailable(arg0 context.Context, msg *message.Message, payload *leaderboardevents.TagAssignedPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTagAvailable", arg0, msg, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTagAvailable indicates an expected call of PublishTagAvailable.
func (mr *MockServiceMockRecorder) PublishTagAvailable(arg0, msg, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTagAvailable", reflect.TypeOf((*MockService)(nil).PublishTagAvailable), arg0, msg, payload)
}

// RoundFinalized mocks base method.
func (m *MockService) RoundFinalized(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoundFinalized", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RoundFinalized indicates an expected call of RoundFinalized.
func (mr *MockServiceMockRecorder) RoundFinalized(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoundFinalized", reflect.TypeOf((*MockService)(nil).RoundFinalized), ctx, msg)
}

// TagAssigned mocks base method.
func (m *MockService) TagAssigned(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagAssigned", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagAssigned indicates an expected call of TagAssigned.
func (mr *MockServiceMockRecorder) TagAssigned(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagAssigned", reflect.TypeOf((*MockService)(nil).TagAssigned), ctx, msg)
}

// TagAssignmentRequested mocks base method.
func (m *MockService) TagAssignmentRequested(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagAssignmentRequested", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagAssignmentRequested indicates an expected call of TagAssignmentRequested.
func (mr *MockServiceMockRecorder) TagAssignmentRequested(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagAssignmentRequested", reflect.TypeOf((*MockService)(nil).TagAssignmentRequested), ctx, msg)
}

// TagAvailabilityCheckRequested mocks base method.
func (m *MockService) TagAvailabilityCheckRequested(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagAvailabilityCheckRequested", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagAvailabilityCheckRequested indicates an expected call of TagAvailabilityCheckRequested.
func (mr *MockServiceMockRecorder) TagAvailabilityCheckRequested(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagAvailabilityCheckRequested", reflect.TypeOf((*MockService)(nil).TagAvailabilityCheckRequested), ctx, msg)
}

// TagSwapInitiated mocks base method.
func (m *MockService) TagSwapInitiated(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagSwapInitiated", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagSwapInitiated indicates an expected call of TagSwapInitiated.
func (mr *MockServiceMockRecorder) TagSwapInitiated(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagSwapInitiated", reflect.TypeOf((*MockService)(nil).TagSwapInitiated), ctx, msg)
}

// TagSwapRequested mocks base method.
func (m *MockService) TagSwapRequested(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagSwapRequested", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagSwapRequested indicates an expected call of TagSwapRequested.
func (mr *MockServiceMockRecorder) TagSwapRequested(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagSwapRequested", reflect.TypeOf((*MockService)(nil).TagSwapRequested), ctx, msg)
}

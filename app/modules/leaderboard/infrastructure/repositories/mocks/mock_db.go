// Code generated by MockGen. DO NOT EDIT.
// Source: ./infrastructure/repositories/interface.go
//
// Generated by this command:
//
//	mockgen -source=./infrastructure/repositories/interface.go -destination=./infrastructure/repositories/mocks/mock_db.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	leaderboarddb "github.com/Black-And-White-Club/tcr-bot/app/modules/leaderboard/infrastructure/repositories"
	gomock "go.uber.org/mock/gomock"
)

// MockLeaderboardDB is a mock of LeaderboardDB interface.
type MockLeaderboardDB struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderboardDBMockRecorder
	isgomock struct{}
}

// MockLeaderboardDBMockRecorder is the mock recorder for MockLeaderboardDB.
type MockLeaderboardDBMockRecorder struct {
	mock *MockLeaderboardDB
}

// NewMockLeaderboardDB creates a new mock instance.
func NewMockLeaderboardDB(ctrl *gomock.Controller) *MockLeaderboardDB {
	mock := &MockLeaderboardDB{ctrl: ctrl}
	mock.recorder = &MockLeaderboardDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaderboardDB) EXPECT() *MockLeaderboardDBMockRecorder {
	return m.recorder
}

// AssignTag mocks base method.
func (m *MockLeaderboardDB) AssignTag(ctx context.Context, discordID string, tagNumber int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignTag", ctx, discordID, tagNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignTag indicates an expected call of AssignTag.
func (mr *MockLeaderboardDBMockRecorder) AssignTag(ctx, discordID, tagNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTag", reflect.TypeOf((*MockLeaderboardDB)(nil).AssignTag), ctx, discordID, tagNumber)
}

// CheckTagAvailability mocks base method.
func (m *MockLeaderboardDB) CheckTagAvailability(ctx context.Context, tagNumber int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTagAvailability", ctx, tagNumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTagAvailability indicates an expected call of CheckTagAvailability.
func (mr *MockLeaderboardDBMockRecorder) CheckTagAvailability(ctx, tagNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTagAvailability", reflect.TypeOf((*MockLeaderboardDB)(nil).CheckTagAvailability), ctx, tagNumber)
}

// DeactivateCurrentLeaderboard mocks base method.
func (m *MockLeaderboardDB) DeactivateCurrentLeaderboard(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateCurrentLeaderboard", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateCurrentLeaderboard indicates an expected call of DeactivateCurrentLeaderboard.
func (mr *MockLeaderboardDBMockRecorder) DeactivateCurrentLeaderboard(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateCurrentLeaderboard", reflect.TypeOf((*MockLeaderboardDB)(nil).DeactivateCurrentLeaderboard), ctx)
}

// GetLeaderboard mocks base method.
func (m *MockLeaderboardDB) GetLeaderboard(ctx context.Context) (*leaderboarddb.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaderboard", ctx)
	ret0, _ := ret[0].(*leaderboarddb.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaderboard indicates an expected call of GetLeaderboard.
func (mr *MockLeaderboardDBMockRecorder) GetLeaderboard(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaderboard", reflect.TypeOf((*MockLeaderboardDB)(nil).GetLeaderboard), ctx)
}

// GetTagByDiscordID mocks base method.
func (m *MockLeaderboardDB) GetTagByDiscordID(ctx context.Context, discordID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByDiscordID", ctx, discordID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByDiscordID indicates an expected call of GetTagByDiscordID.
func (mr *MockLeaderboardDBMockRecorder) GetTagByDiscordID(ctx, discordID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByDiscordID", reflect.TypeOf((*MockLeaderboardDB)(nil).GetTagByDiscordID), ctx, discordID)
}

// InsertLeaderboard mocks base method.
func (m *MockLeaderboardDB) InsertLeaderboard(ctx context.Context, leaderboardData map[int]string, active bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLeaderboard", ctx, leaderboardData, active)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLeaderboard indicates an expected call of InsertLeaderboard.
func (mr *MockLeaderboardDBMockRecorder) InsertLeaderboard(ctx, leaderboardData, active any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLeaderboard", reflect.TypeOf((*MockLeaderboardDB)(nil).InsertLeaderboard), ctx, leaderboardData, active)
}

// SwapTags mocks base method.
func (m *MockLeaderboardDB) SwapTags(ctx context.Context, requestorID, targetID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapTags", ctx, requestorID, targetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwapTags indicates an expected call of SwapTags.
func (mr *MockLeaderboardDBMockRecorder) SwapTags(ctx, requestorID, targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapTags", reflect.TypeOf((*MockLeaderboardDB)(nil).SwapTags), ctx, requestorID, targetID)
}

// UpdateLeaderboard mocks base method.
func (m *MockLeaderboardDB) UpdateLeaderboard(ctx context.Context, entries map[int]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLeaderboard", ctx, entries)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLeaderboard indicates an expected call of UpdateLeaderboard.
func (mr *MockLeaderboardDBMockRecorder) UpdateLeaderboard(ctx, entries any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLeaderboard", reflect.TypeOf((*MockLeaderboardDB)(nil).UpdateLeaderboard), ctx, entries)
}

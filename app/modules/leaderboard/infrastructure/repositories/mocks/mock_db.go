// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/leaderboard/infrastructure/repositories/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/leaderboard/infrastructure/repositories/interface.go -destination=./app/modules/leaderboard/infrastructure/repositories/mocks/mock_db.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	leaderboardtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/leaderboard"
	sharedtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/shared"
	leaderboarddb "github.com/Black-And-White-Club/frolf-bot/app/modules/leaderboard/infrastructure/repositories"
	gomock "go.uber.org/mock/gomock"
)

// MockLeaderboardDB is a mock of LeaderboardDB interface.
type MockLeaderboardDB struct {
	ctrl     *gomock.Controller
	recorder *MockLeaderboardDBMockRecorder
	isgomock struct{}
}

// MockLeaderboardDBMockRecorder is the mock recorder for MockLeaderboardDB.
type MockLeaderboardDBMockRecorder struct {
	mock *MockLeaderboardDB
}

// NewMockLeaderboardDB creates a new mock instance.
func NewMockLeaderboardDB(ctrl *gomock.Controller) *MockLeaderboardDB {
	mock := &MockLeaderboardDB{ctrl: ctrl}
	mock.recorder = &MockLeaderboardDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeaderboardDB) EXPECT() *MockLeaderboardDBMockRecorder {
	return m.recorder
}

// AssignTag mocks base method.
func (m *MockLeaderboardDB) AssignTag(ctx context.Context, guildID sharedtypes.GuildID, userID sharedtypes.DiscordID, tagNumber sharedtypes.TagNumber, source string, requestUpdateID sharedtypes.RoundID, requestingUserID sharedtypes.DiscordID) (sharedtypes.RoundID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignTag", ctx, guildID, userID, tagNumber, source, requestUpdateID, requestingUserID)
	ret0, _ := ret[0].(sharedtypes.RoundID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignTag indicates an expected call of AssignTag.
func (mr *MockLeaderboardDBMockRecorder) AssignTag(ctx, guildID, userID, tagNumber, source, requestUpdateID, requestingUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTag", reflect.TypeOf((*MockLeaderboardDB)(nil).AssignTag), ctx, guildID, userID, tagNumber, source, requestUpdateID, requestingUserID)
}

// BatchAssignTags mocks base method.
func (m *MockLeaderboardDB) BatchAssignTags(ctx context.Context, guildID sharedtypes.GuildID, assignments []leaderboarddb.TagAssignment, source sharedtypes.ServiceUpdateSource, updateID sharedtypes.RoundID, userID sharedtypes.DiscordID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAssignTags", ctx, guildID, assignments, source, updateID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchAssignTags indicates an expected call of BatchAssignTags.
func (mr *MockLeaderboardDBMockRecorder) BatchAssignTags(ctx, guildID, assignments, source, updateID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAssignTags", reflect.TypeOf((*MockLeaderboardDB)(nil).BatchAssignTags), ctx, guildID, assignments, source, updateID, userID)
}

// CheckTagAvailability mocks base method.
func (m *MockLeaderboardDB) CheckTagAvailability(ctx context.Context, guildID sharedtypes.GuildID, tagNumber sharedtypes.TagNumber) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTagAvailability", ctx, guildID, tagNumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTagAvailability indicates an expected call of CheckTagAvailability.
func (mr *MockLeaderboardDBMockRecorder) CheckTagAvailability(ctx, guildID, tagNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTagAvailability", reflect.TypeOf((*MockLeaderboardDB)(nil).CheckTagAvailability), ctx, guildID, tagNumber)
}

// CreateLeaderboard mocks base method.
func (m *MockLeaderboardDB) CreateLeaderboard(ctx context.Context, guildID sharedtypes.GuildID, leaderboard *leaderboarddb.Leaderboard) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLeaderboard", ctx, guildID, leaderboard)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLeaderboard indicates an expected call of CreateLeaderboard.
func (mr *MockLeaderboardDBMockRecorder) CreateLeaderboard(ctx, guildID, leaderboard any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLeaderboard", reflect.TypeOf((*MockLeaderboardDB)(nil).CreateLeaderboard), ctx, guildID, leaderboard)
}

// DeactivateLeaderboard mocks base method.
func (m *MockLeaderboardDB) DeactivateLeaderboard(ctx context.Context, guildID sharedtypes.GuildID, leaderboardID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateLeaderboard", ctx, guildID, leaderboardID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateLeaderboard indicates an expected call of DeactivateLeaderboard.
func (mr *MockLeaderboardDBMockRecorder) DeactivateLeaderboard(ctx, guildID, leaderboardID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateLeaderboard", reflect.TypeOf((*MockLeaderboardDB)(nil).DeactivateLeaderboard), ctx, guildID, leaderboardID)
}

// GetActiveLeaderboard mocks base method.
func (m *MockLeaderboardDB) GetActiveLeaderboard(ctx context.Context, guildID sharedtypes.GuildID) (*leaderboarddb.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveLeaderboard", ctx, guildID)
	ret0, _ := ret[0].(*leaderboarddb.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveLeaderboard indicates an expected call of GetActiveLeaderboard.
func (mr *MockLeaderboardDBMockRecorder) GetActiveLeaderboard(ctx, guildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveLeaderboard", reflect.TypeOf((*MockLeaderboardDB)(nil).GetActiveLeaderboard), ctx, guildID)
}

// GetTagByUserID mocks base method.
func (m *MockLeaderboardDB) GetTagByUserID(ctx context.Context, guildID sharedtypes.GuildID, userID sharedtypes.DiscordID) (*sharedtypes.TagNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagByUserID", ctx, guildID, userID)
	ret0, _ := ret[0].(*sharedtypes.TagNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagByUserID indicates an expected call of GetTagByUserID.
func (mr *MockLeaderboardDBMockRecorder) GetTagByUserID(ctx, guildID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagByUserID", reflect.TypeOf((*MockLeaderboardDB)(nil).GetTagByUserID), ctx, guildID, userID)
}

// SwapTags mocks base method.
func (m *MockLeaderboardDB) SwapTags(ctx context.Context, guildID sharedtypes.GuildID, requestorID, targetID sharedtypes.DiscordID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapTags", ctx, guildID, requestorID, targetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwapTags indicates an expected call of SwapTags.
func (mr *MockLeaderboardDBMockRecorder) SwapTags(ctx, guildID, requestorID, targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapTags", reflect.TypeOf((*MockLeaderboardDB)(nil).SwapTags), ctx, guildID, requestorID, targetID)
}

// UpdateLeaderboard mocks base method.
func (m *MockLeaderboardDB) UpdateLeaderboard(ctx context.Context, guildID sharedtypes.GuildID, leaderboardData leaderboardtypes.LeaderboardData, UpdateID sharedtypes.RoundID) (*leaderboarddb.Leaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLeaderboard", ctx, guildID, leaderboardData, UpdateID)
	ret0, _ := ret[0].(*leaderboarddb.Leaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLeaderboard indicates an expected call of UpdateLeaderboard.
func (mr *MockLeaderboardDBMockRecorder) UpdateLeaderboard(ctx, guildID, leaderboardData, UpdateID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLeaderboard", reflect.TypeOf((*MockLeaderboardDB)(nil).UpdateLeaderboard), ctx, guildID, leaderboardData, UpdateID)
}

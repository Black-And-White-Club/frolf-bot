// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/leaderboard/infrastructure/handlers/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/leaderboard/infrastructure/handlers/interface.go -destination=./app/modules/leaderboard/infrastructure/handlers/mocks/mock_handlers.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockHandlers is a mock of Handlers interface.
type MockHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockHandlersMockRecorder
	isgomock struct{}
}

// MockHandlersMockRecorder is the mock recorder for MockHandlers.
type MockHandlersMockRecorder struct {
	mock *MockHandlers
}

// NewMockHandlers creates a new mock instance.
func NewMockHandlers(ctrl *gomock.Controller) *MockHandlers {
	mock := &MockHandlers{ctrl: ctrl}
	mock.recorder = &MockHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlers) EXPECT() *MockHandlersMockRecorder {
	return m.recorder
}

// HandleGetLeaderboardRequest mocks base method.
func (m *MockHandlers) HandleGetLeaderboardRequest(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleGetLeaderboardRequest", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleGetLeaderboardRequest indicates an expected call of HandleGetLeaderboardRequest.
func (mr *MockHandlersMockRecorder) HandleGetLeaderboardRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGetLeaderboardRequest", reflect.TypeOf((*MockHandlers)(nil).HandleGetLeaderboardRequest), msg)
}

// HandleGetTagByUserIDRequest mocks base method.
func (m *MockHandlers) HandleGetTagByUserIDRequest(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleGetTagByUserIDRequest", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleGetTagByUserIDRequest indicates an expected call of HandleGetTagByUserIDRequest.
func (mr *MockHandlersMockRecorder) HandleGetTagByUserIDRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGetTagByUserIDRequest", reflect.TypeOf((*MockHandlers)(nil).HandleGetTagByUserIDRequest), msg)
}

// HandleLeaderboardUpdateRequested mocks base method.
func (m *MockHandlers) HandleLeaderboardUpdateRequested(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleLeaderboardUpdateRequested", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleLeaderboardUpdateRequested indicates an expected call of HandleLeaderboardUpdateRequested.
func (mr *MockHandlersMockRecorder) HandleLeaderboardUpdateRequested(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleLeaderboardUpdateRequested", reflect.TypeOf((*MockHandlers)(nil).HandleLeaderboardUpdateRequested), msg)
}

// HandleTagAssignment mocks base method.
func (m *MockHandlers) HandleTagAssignment(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTagAssignment", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleTagAssignment indicates an expected call of HandleTagAssignment.
func (mr *MockHandlersMockRecorder) HandleTagAssignment(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTagAssignment", reflect.TypeOf((*MockHandlers)(nil).HandleTagAssignment), msg)
}

// HandleTagAvailabilityCheckRequested mocks base method.
func (m *MockHandlers) HandleTagAvailabilityCheckRequested(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTagAvailabilityCheckRequested", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleTagAvailabilityCheckRequested indicates an expected call of HandleTagAvailabilityCheckRequested.
func (mr *MockHandlersMockRecorder) HandleTagAvailabilityCheckRequested(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTagAvailabilityCheckRequested", reflect.TypeOf((*MockHandlers)(nil).HandleTagAvailabilityCheckRequested), msg)
}

// HandleTagSwapRequested mocks base method.
func (m *MockHandlers) HandleTagSwapRequested(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTagSwapRequested", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleTagSwapRequested indicates an expected call of HandleTagSwapRequested.
func (mr *MockHandlersMockRecorder) HandleTagSwapRequested(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTagSwapRequested", reflect.TypeOf((*MockHandlers)(nil).HandleTagSwapRequested), msg)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./infrastructure/handlers/interface.go
//
// Generated by this command:
//
//	mockgen -source=./infrastructure/handlers/interface.go -destination=./infrastructure/handlers/mocks/mock_handlers.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockHandlers is a mock of Handlers interface.
type MockHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockHandlersMockRecorder
	isgomock struct{}
}

// MockHandlersMockRecorder is the mock recorder for MockHandlers.
type MockHandlersMockRecorder struct {
	mock *MockHandlers
}

// NewMockHandlers creates a new mock instance.
func NewMockHandlers(ctrl *gomock.Controller) *MockHandlers {
	mock := &MockHandlers{ctrl: ctrl}
	mock.recorder = &MockHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlers) EXPECT() *MockHandlersMockRecorder {
	return m.recorder
}

// HandleCheckTagAvailabilityRequest mocks base method.
func (m *MockHandlers) HandleCheckTagAvailabilityRequest(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCheckTagAvailabilityRequest", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleCheckTagAvailabilityRequest indicates an expected call of HandleCheckTagAvailabilityRequest.
func (mr *MockHandlersMockRecorder) HandleCheckTagAvailabilityRequest(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCheckTagAvailabilityRequest", reflect.TypeOf((*MockHandlers)(nil).HandleCheckTagAvailabilityRequest), ctx, msg)
}

// HandleGetLeaderboardRequest mocks base method.
func (m *MockHandlers) HandleGetLeaderboardRequest(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleGetLeaderboardRequest", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleGetLeaderboardRequest indicates an expected call of HandleGetLeaderboardRequest.
func (mr *MockHandlersMockRecorder) HandleGetLeaderboardRequest(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGetLeaderboardRequest", reflect.TypeOf((*MockHandlers)(nil).HandleGetLeaderboardRequest), ctx, msg)
}

// HandleGetTagByDiscordIDRequest mocks base method.
func (m *MockHandlers) HandleGetTagByDiscordIDRequest(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleGetTagByDiscordIDRequest", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleGetTagByDiscordIDRequest indicates an expected call of HandleGetTagByDiscordIDRequest.
func (mr *MockHandlersMockRecorder) HandleGetTagByDiscordIDRequest(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGetTagByDiscordIDRequest", reflect.TypeOf((*MockHandlers)(nil).HandleGetTagByDiscordIDRequest), ctx, msg)
}

// HandleLeaderboardUpdate mocks base method.
func (m *MockHandlers) HandleLeaderboardUpdate(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleLeaderboardUpdate", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleLeaderboardUpdate indicates an expected call of HandleLeaderboardUpdate.
func (mr *MockHandlersMockRecorder) HandleLeaderboardUpdate(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleLeaderboardUpdate", reflect.TypeOf((*MockHandlers)(nil).HandleLeaderboardUpdate), ctx, msg)
}

// HandleTagAssigned mocks base method.
func (m *MockHandlers) HandleTagAssigned(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTagAssigned", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTagAssigned indicates an expected call of HandleTagAssigned.
func (mr *MockHandlersMockRecorder) HandleTagAssigned(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTagAssigned", reflect.TypeOf((*MockHandlers)(nil).HandleTagAssigned), ctx, msg)
}

// HandleTagSwapRequest mocks base method.
func (m *MockHandlers) HandleTagSwapRequest(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTagSwapRequest", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTagSwapRequest indicates an expected call of HandleTagSwapRequest.
func (mr *MockHandlersMockRecorder) HandleTagSwapRequest(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTagSwapRequest", reflect.TypeOf((*MockHandlers)(nil).HandleTagSwapRequest), ctx, msg)
}

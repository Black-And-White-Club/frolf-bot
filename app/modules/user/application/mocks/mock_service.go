// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/user/application/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/user/application/interface.go -destination=./app/modules/user/application/mocks/mock_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	userevents "github.com/Black-And-White-Club/frolf-bot-shared/events/user"
	usertypes "github.com/Black-And-White-Club/frolf-bot-shared/types/user"
	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockService) CreateUser(ctx context.Context, msg *message.Message, userID usertypes.DiscordID, tag *int) (*userevents.UserCreatedPayload, *userevents.UserCreationFailedPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, msg, userID, tag)
	ret0, _ := ret[0].(*userevents.UserCreatedPayload)
	ret1, _ := ret[1].(*userevents.UserCreationFailedPayload)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMockRecorder) CreateUser(ctx, msg, userID, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), ctx, msg, userID, tag)
}

// GetUser mocks base method.
func (m *MockService) GetUser(ctx context.Context, msg *message.Message, userID usertypes.DiscordID) (*userevents.GetUserResponsePayload, *userevents.GetUserFailedPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, msg, userID)
	ret0, _ := ret[0].(*userevents.GetUserResponsePayload)
	ret1, _ := ret[1].(*userevents.GetUserFailedPayload)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUser indicates an expected call of GetUser.
func (mr *MockServiceMockRecorder) GetUser(ctx, msg, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockService)(nil).GetUser), ctx, msg, userID)
}

// GetUserRole mocks base method.
func (m *MockService) GetUserRole(ctx context.Context, msg *message.Message, userID usertypes.DiscordID) (*userevents.GetUserRoleResponsePayload, *userevents.GetUserRoleFailedPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRole", ctx, msg, userID)
	ret0, _ := ret[0].(*userevents.GetUserRoleResponsePayload)
	ret1, _ := ret[1].(*userevents.GetUserRoleFailedPayload)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserRole indicates an expected call of GetUserRole.
func (mr *MockServiceMockRecorder) GetUserRole(ctx, msg, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRole", reflect.TypeOf((*MockService)(nil).GetUserRole), ctx, msg, userID)
}

// UpdateUserRoleInDatabase mocks base method.
func (m *MockService) UpdateUserRoleInDatabase(ctx context.Context, msg *message.Message, userID usertypes.DiscordID, newRole usertypes.UserRoleEnum) (*userevents.UserRoleUpdateResultPayload, *userevents.UserRoleUpdateFailedPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRoleInDatabase", ctx, msg, userID, newRole)
	ret0, _ := ret[0].(*userevents.UserRoleUpdateResultPayload)
	ret1, _ := ret[1].(*userevents.UserRoleUpdateFailedPayload)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateUserRoleInDatabase indicates an expected call of UpdateUserRoleInDatabase.
func (mr *MockServiceMockRecorder) UpdateUserRoleInDatabase(ctx, msg, userID, newRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRoleInDatabase", reflect.TypeOf((*MockService)(nil).UpdateUserRoleInDatabase), ctx, msg, userID, newRole)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: subscribers/interface.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/subscribers_mock.go -package=user_mocks -source=subscribers/interface.go UserEventSubscriber Closer
//

// Package user_mocks is a generated GoMock package.
package user_mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserEventSubscriber is a mock of UserEventSubscriber interface.
type MockUserEventSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockUserEventSubscriberMockRecorder
	isgomock struct{}
}

// MockUserEventSubscriberMockRecorder is the mock recorder for MockUserEventSubscriber.
type MockUserEventSubscriberMockRecorder struct {
	mock *MockUserEventSubscriber
}

// NewMockUserEventSubscriber creates a new mock instance.
func NewMockUserEventSubscriber(ctrl *gomock.Controller) *MockUserEventSubscriber {
	mock := &MockUserEventSubscriber{ctrl: ctrl}
	mock.recorder = &MockUserEventSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserEventSubscriber) EXPECT() *MockUserEventSubscriberMockRecorder {
	return m.recorder
}

// SubscribeToUserEvents mocks base method.
func (m *MockUserEventSubscriber) SubscribeToUserEvents(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToUserEvents", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToUserEvents indicates an expected call of SubscribeToUserEvents.
func (mr *MockUserEventSubscriberMockRecorder) SubscribeToUserEvents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToUserEvents", reflect.TypeOf((*MockUserEventSubscriber)(nil).SubscribeToUserEvents), ctx)
}

// MockCloser is a mock of Closer interface.
type MockCloser struct {
	ctrl     *gomock.Controller
	recorder *MockCloserMockRecorder
	isgomock struct{}
}

// MockCloserMockRecorder is the mock recorder for MockCloser.
type MockCloserMockRecorder struct {
	mock *MockCloser
}

// NewMockCloser creates a new mock instance.
func NewMockCloser(ctrl *gomock.Controller) *MockCloser {
	mock := &MockCloser{ctrl: ctrl}
	mock.recorder = &MockCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloser) EXPECT() *MockCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCloser)(nil).Close))
}

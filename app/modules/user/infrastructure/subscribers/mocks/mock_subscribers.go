// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/subscribers/interface.go
//
// Generated by this command:
//
//	mockgen -source=infrastructure/subscribers/interface.go -destination=infrastructure/subscribers/mocks/mock_subscribers.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	userinterfaces "github.com/Black-And-White-Club/tcr-bot/app/modules/user/interfaces"
	types "github.com/Black-And-White-Club/tcr-bot/app/types"
	gomock "go.uber.org/mock/gomock"
)

// MockUserEventSubscriber is a mock of UserEventSubscriber interface.
type MockUserEventSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockUserEventSubscriberMockRecorder
	isgomock struct{}
}

// MockUserEventSubscriberMockRecorder is the mock recorder for MockUserEventSubscriber.
type MockUserEventSubscriberMockRecorder struct {
	mock *MockUserEventSubscriber
}

// NewMockUserEventSubscriber creates a new mock instance.
func NewMockUserEventSubscriber(ctrl *gomock.Controller) *MockUserEventSubscriber {
	mock := &MockUserEventSubscriber{ctrl: ctrl}
	mock.recorder = &MockUserEventSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserEventSubscriber) EXPECT() *MockUserEventSubscriberMockRecorder {
	return m.recorder
}

// SubscribeToUserEvents mocks base method.
func (m *MockUserEventSubscriber) SubscribeToUserEvents(ctx context.Context, subscriber types.Subscriber, handlers userinterfaces.Handlers, logger types.LoggerAdapter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToUserEvents", ctx, subscriber, handlers, logger)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToUserEvents indicates an expected call of SubscribeToUserEvents.
func (mr *MockUserEventSubscriberMockRecorder) SubscribeToUserEvents(ctx, subscriber, handlers, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToUserEvents", reflect.TypeOf((*MockUserEventSubscriber)(nil).SubscribeToUserEvents), ctx, subscriber, handlers, logger)
}

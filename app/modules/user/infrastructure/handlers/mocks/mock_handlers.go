// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/user/infrastructure/handlers/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/user/infrastructure/handlers/interface.go -destination=./app/modules/user/infrastructure/handlers/mocks/mock_handlers.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockHandlers is a mock of Handlers interface.
type MockHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockHandlersMockRecorder
	isgomock struct{}
}

// MockHandlersMockRecorder is the mock recorder for MockHandlers.
type MockHandlersMockRecorder struct {
	mock *MockHandlers
}

// NewMockHandlers creates a new mock instance.
func NewMockHandlers(ctrl *gomock.Controller) *MockHandlers {
	mock := &MockHandlers{ctrl: ctrl}
	mock.recorder = &MockHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlers) EXPECT() *MockHandlersMockRecorder {
	return m.recorder
}

// HandleGetUserRequest mocks base method.
func (m *MockHandlers) HandleGetUserRequest(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleGetUserRequest", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleGetUserRequest indicates an expected call of HandleGetUserRequest.
func (mr *MockHandlersMockRecorder) HandleGetUserRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGetUserRequest", reflect.TypeOf((*MockHandlers)(nil).HandleGetUserRequest), msg)
}

// HandleGetUserRoleRequest mocks base method.
func (m *MockHandlers) HandleGetUserRoleRequest(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleGetUserRoleRequest", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleGetUserRoleRequest indicates an expected call of HandleGetUserRoleRequest.
func (mr *MockHandlersMockRecorder) HandleGetUserRoleRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGetUserRoleRequest", reflect.TypeOf((*MockHandlers)(nil).HandleGetUserRoleRequest), msg)
}

// HandleTagAvailable mocks base method.
func (m *MockHandlers) HandleTagAvailable(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTagAvailable", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTagAvailable indicates an expected call of HandleTagAvailable.
func (mr *MockHandlersMockRecorder) HandleTagAvailable(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTagAvailable", reflect.TypeOf((*MockHandlers)(nil).HandleTagAvailable), msg)
}

// HandleTagUnavailable mocks base method.
func (m *MockHandlers) HandleTagUnavailable(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTagUnavailable", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTagUnavailable indicates an expected call of HandleTagUnavailable.
func (mr *MockHandlersMockRecorder) HandleTagUnavailable(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTagUnavailable", reflect.TypeOf((*MockHandlers)(nil).HandleTagUnavailable), msg)
}

// HandleUserPermissionsCheckFailed mocks base method.
func (m *MockHandlers) HandleUserPermissionsCheckFailed(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserPermissionsCheckFailed", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleUserPermissionsCheckFailed indicates an expected call of HandleUserPermissionsCheckFailed.
func (mr *MockHandlersMockRecorder) HandleUserPermissionsCheckFailed(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserPermissionsCheckFailed", reflect.TypeOf((*MockHandlers)(nil).HandleUserPermissionsCheckFailed), msg)
}

// HandleUserPermissionsCheckRequest mocks base method.
func (m *MockHandlers) HandleUserPermissionsCheckRequest(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserPermissionsCheckRequest", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleUserPermissionsCheckRequest indicates an expected call of HandleUserPermissionsCheckRequest.
func (mr *MockHandlersMockRecorder) HandleUserPermissionsCheckRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserPermissionsCheckRequest", reflect.TypeOf((*MockHandlers)(nil).HandleUserPermissionsCheckRequest), msg)
}

// HandleUserPermissionsCheckResponse mocks base method.
func (m *MockHandlers) HandleUserPermissionsCheckResponse(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserPermissionsCheckResponse", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleUserPermissionsCheckResponse indicates an expected call of HandleUserPermissionsCheckResponse.
func (mr *MockHandlersMockRecorder) HandleUserPermissionsCheckResponse(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserPermissionsCheckResponse", reflect.TypeOf((*MockHandlers)(nil).HandleUserPermissionsCheckResponse), msg)
}

// HandleUserRoleUpdateRequest mocks base method.
func (m *MockHandlers) HandleUserRoleUpdateRequest(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserRoleUpdateRequest", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleUserRoleUpdateRequest indicates an expected call of HandleUserRoleUpdateRequest.
func (mr *MockHandlersMockRecorder) HandleUserRoleUpdateRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserRoleUpdateRequest", reflect.TypeOf((*MockHandlers)(nil).HandleUserRoleUpdateRequest), msg)
}

// HandleUserSignupRequest mocks base method.
func (m *MockHandlers) HandleUserSignupRequest(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserSignupRequest", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleUserSignupRequest indicates an expected call of HandleUserSignupRequest.
func (mr *MockHandlersMockRecorder) HandleUserSignupRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserSignupRequest", reflect.TypeOf((*MockHandlers)(nil).HandleUserSignupRequest), msg)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/score/application/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/score/application/interface.go -destination=./app/modules/score/application/mocks/mock_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sharedtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/shared"
	scoreservice "github.com/Black-And-White-Club/frolf-bot/app/modules/score/application"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CorrectScore mocks base method.
func (m *MockService) CorrectScore(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID, userID sharedtypes.DiscordID, score sharedtypes.Score, tagNumber *sharedtypes.TagNumber) (scoreservice.ScoreOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CorrectScore", ctx, guildID, roundID, userID, score, tagNumber)
	ret0, _ := ret[0].(scoreservice.ScoreOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CorrectScore indicates an expected call of CorrectScore.
func (mr *MockServiceMockRecorder) CorrectScore(ctx, guildID, roundID, userID, score, tagNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CorrectScore", reflect.TypeOf((*MockService)(nil).CorrectScore), ctx, guildID, roundID, userID, score, tagNumber)
}

// GetScoresForRound mocks base method.
func (m *MockService) GetScoresForRound(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID) ([]sharedtypes.ScoreInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScoresForRound", ctx, guildID, roundID)
	ret0, _ := ret[0].([]sharedtypes.ScoreInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScoresForRound indicates an expected call of GetScoresForRound.
func (mr *MockServiceMockRecorder) GetScoresForRound(ctx, guildID, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScoresForRound", reflect.TypeOf((*MockService)(nil).GetScoresForRound), ctx, guildID, roundID)
}

// ProcessRoundScores mocks base method.
func (m *MockService) ProcessRoundScores(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID, scores []sharedtypes.ScoreInfo) (scoreservice.ScoreOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRoundScores", ctx, guildID, roundID, scores)
	ret0, _ := ret[0].(scoreservice.ScoreOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessRoundScores indicates an expected call of ProcessRoundScores.
func (mr *MockServiceMockRecorder) ProcessRoundScores(ctx, guildID, roundID, scores any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRoundScores", reflect.TypeOf((*MockService)(nil).ProcessRoundScores), ctx, guildID, roundID, scores)
}

// ProcessScoresForStorage mocks base method.
func (m *MockService) ProcessScoresForStorage(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID, scores []sharedtypes.ScoreInfo) ([]sharedtypes.ScoreInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessScoresForStorage", ctx, guildID, roundID, scores)
	ret0, _ := ret[0].([]sharedtypes.ScoreInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessScoresForStorage indicates an expected call of ProcessScoresForStorage.
func (mr *MockServiceMockRecorder) ProcessScoresForStorage(ctx, guildID, roundID, scores any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessScoresForStorage", reflect.TypeOf((*MockService)(nil).ProcessScoresForStorage), ctx, guildID, roundID, scores)
}

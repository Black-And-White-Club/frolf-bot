// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/score/infrastructure/repositories/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/score/infrastructure/repositories/interface.go -destination=./app/modules/score/infrastructure/repositories/mocks/mock_db.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sharedtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockScoreDB is a mock of ScoreDB interface.
type MockScoreDB struct {
	ctrl     *gomock.Controller
	recorder *MockScoreDBMockRecorder
	isgomock struct{}
}

// MockScoreDBMockRecorder is the mock recorder for MockScoreDB.
type MockScoreDBMockRecorder struct {
	mock *MockScoreDB
}

// NewMockScoreDB creates a new mock instance.
func NewMockScoreDB(ctrl *gomock.Controller) *MockScoreDB {
	mock := &MockScoreDB{ctrl: ctrl}
	mock.recorder = &MockScoreDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoreDB) EXPECT() *MockScoreDBMockRecorder {
	return m.recorder
}

// GetScoresForRound mocks base method.
func (m *MockScoreDB) GetScoresForRound(ctx context.Context, roundID sharedtypes.RoundID) ([]sharedtypes.ScoreInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScoresForRound", ctx, roundID)
	ret0, _ := ret[0].([]sharedtypes.ScoreInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScoresForRound indicates an expected call of GetScoresForRound.
func (mr *MockScoreDBMockRecorder) GetScoresForRound(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScoresForRound", reflect.TypeOf((*MockScoreDB)(nil).GetScoresForRound), ctx, roundID)
}

// LogScores mocks base method.
func (m *MockScoreDB) LogScores(ctx context.Context, roundID sharedtypes.RoundID, scores []sharedtypes.ScoreInfo, source string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogScores", ctx, roundID, scores, source)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogScores indicates an expected call of LogScores.
func (mr *MockScoreDBMockRecorder) LogScores(ctx, roundID, scores, source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogScores", reflect.TypeOf((*MockScoreDB)(nil).LogScores), ctx, roundID, scores, source)
}

// UpdateOrAddScore mocks base method.
func (m *MockScoreDB) UpdateOrAddScore(ctx context.Context, roundID sharedtypes.RoundID, scoreInfo sharedtypes.ScoreInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrAddScore", ctx, roundID, scoreInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrAddScore indicates an expected call of UpdateOrAddScore.
func (mr *MockScoreDBMockRecorder) UpdateOrAddScore(ctx, roundID, scoreInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrAddScore", reflect.TypeOf((*MockScoreDB)(nil).UpdateOrAddScore), ctx, roundID, scoreInfo)
}

// UpdateScore mocks base method.
func (m *MockScoreDB) UpdateScore(ctx context.Context, roundID sharedtypes.RoundID, userID sharedtypes.DiscordID, newScore sharedtypes.Score) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScore", ctx, roundID, userID, newScore)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScore indicates an expected call of UpdateScore.
func (mr *MockScoreDBMockRecorder) UpdateScore(ctx, roundID, userID, newScore any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScore", reflect.TypeOf((*MockScoreDB)(nil).UpdateScore), ctx, roundID, userID, newScore)
}

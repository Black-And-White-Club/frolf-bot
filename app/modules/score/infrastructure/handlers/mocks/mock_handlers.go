// Code generated by MockGen. DO NOT EDIT.
// Source: app/modules/score/infrastructure/handlers/interface.go
//
// Generated by this command:
//
//	mockgen -source=app/modules/score/infrastructure/handlers/interface.go -destination=app/modules/score/infrastructure/handlers/mocks/mock_handlers.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockHandlers is a mock of Handlers interface.
type MockHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockHandlersMockRecorder
	isgomock struct{}
}

// MockHandlersMockRecorder is the mock recorder for MockHandlers.
type MockHandlersMockRecorder struct {
	mock *MockHandlers
}

// NewMockHandlers creates a new mock instance.
func NewMockHandlers(ctrl *gomock.Controller) *MockHandlers {
	mock := &MockHandlers{ctrl: ctrl}
	mock.recorder = &MockHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlers) EXPECT() *MockHandlersMockRecorder {
	return m.recorder
}

// HandleScoreCorrected mocks base method.
func (m *MockHandlers) HandleScoreCorrected(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleScoreCorrected", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleScoreCorrected indicates an expected call of HandleScoreCorrected.
func (mr *MockHandlersMockRecorder) HandleScoreCorrected(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleScoreCorrected", reflect.TypeOf((*MockHandlers)(nil).HandleScoreCorrected), ctx, msg)
}

// HandleScoresReceived mocks base method.
func (m *MockHandlers) HandleScoresReceived(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleScoresReceived", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleScoresReceived indicates an expected call of HandleScoresReceived.
func (mr *MockHandlersMockRecorder) HandleScoresReceived(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleScoresReceived", reflect.TypeOf((*MockHandlers)(nil).HandleScoresReceived), ctx, msg)
}

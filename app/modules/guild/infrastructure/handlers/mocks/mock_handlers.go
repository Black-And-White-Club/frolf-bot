// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/guild/infrastructure/handlers/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/guild/infrastructure/handlers/interface.go -destination=./app/modules/guild/infrastructure/handlers/mocks/mock_handlers.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockHandlers is a mock of Handlers interface.
type MockHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockHandlersMockRecorder
	isgomock struct{}
}

// MockHandlersMockRecorder is the mock recorder for MockHandlers.
type MockHandlersMockRecorder struct {
	mock *MockHandlers
}

// NewMockHandlers creates a new mock instance.
func NewMockHandlers(ctrl *gomock.Controller) *MockHandlers {
	mock := &MockHandlers{ctrl: ctrl}
	mock.recorder = &MockHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlers) EXPECT() *MockHandlersMockRecorder {
	return m.recorder
}

// HandleCreateGuildConfig mocks base method.
func (m *MockHandlers) HandleCreateGuildConfig(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCreateGuildConfig", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleCreateGuildConfig indicates an expected call of HandleCreateGuildConfig.
func (mr *MockHandlersMockRecorder) HandleCreateGuildConfig(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreateGuildConfig", reflect.TypeOf((*MockHandlers)(nil).HandleCreateGuildConfig), msg)
}

// HandleDeleteGuildConfig mocks base method.
func (m *MockHandlers) HandleDeleteGuildConfig(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDeleteGuildConfig", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleDeleteGuildConfig indicates an expected call of HandleDeleteGuildConfig.
func (mr *MockHandlersMockRecorder) HandleDeleteGuildConfig(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeleteGuildConfig", reflect.TypeOf((*MockHandlers)(nil).HandleDeleteGuildConfig), msg)
}

// HandleGuildSetup mocks base method.
func (m *MockHandlers) HandleGuildSetup(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleGuildSetup", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleGuildSetup indicates an expected call of HandleGuildSetup.
func (mr *MockHandlersMockRecorder) HandleGuildSetup(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGuildSetup", reflect.TypeOf((*MockHandlers)(nil).HandleGuildSetup), msg)
}

// HandleRetrieveGuildConfig mocks base method.
func (m *MockHandlers) HandleRetrieveGuildConfig(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRetrieveGuildConfig", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRetrieveGuildConfig indicates an expected call of HandleRetrieveGuildConfig.
func (mr *MockHandlersMockRecorder) HandleRetrieveGuildConfig(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRetrieveGuildConfig", reflect.TypeOf((*MockHandlers)(nil).HandleRetrieveGuildConfig), msg)
}

// HandleUpdateGuildConfig mocks base method.
func (m *MockHandlers) HandleUpdateGuildConfig(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUpdateGuildConfig", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleUpdateGuildConfig indicates an expected call of HandleUpdateGuildConfig.
func (mr *MockHandlersMockRecorder) HandleUpdateGuildConfig(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUpdateGuildConfig", reflect.TypeOf((*MockHandlers)(nil).HandleUpdateGuildConfig), msg)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/guild/infrastructure/repositories/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/guild/infrastructure/repositories/interface.go -destination=./app/modules/guild/infrastructure/repositories/mocks/mock_db.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	guildtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/guild"
	sharedtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockGuildDB is a mock of GuildDB interface.
type MockGuildDB struct {
	ctrl     *gomock.Controller
	recorder *MockGuildDBMockRecorder
	isgomock struct{}
}

// MockGuildDBMockRecorder is the mock recorder for MockGuildDB.
type MockGuildDBMockRecorder struct {
	mock *MockGuildDB
}

// NewMockGuildDB creates a new mock instance.
func NewMockGuildDB(ctrl *gomock.Controller) *MockGuildDB {
	mock := &MockGuildDB{ctrl: ctrl}
	mock.recorder = &MockGuildDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGuildDB) EXPECT() *MockGuildDBMockRecorder {
	return m.recorder
}

// DeleteConfig mocks base method.
func (m *MockGuildDB) DeleteConfig(ctx context.Context, guildID sharedtypes.GuildID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfig", ctx, guildID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfig indicates an expected call of DeleteConfig.
func (mr *MockGuildDBMockRecorder) DeleteConfig(ctx, guildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfig", reflect.TypeOf((*MockGuildDB)(nil).DeleteConfig), ctx, guildID)
}

// GetConfig mocks base method.
func (m *MockGuildDB) GetConfig(ctx context.Context, guildID sharedtypes.GuildID) (*guildtypes.GuildConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx, guildID)
	ret0, _ := ret[0].(*guildtypes.GuildConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockGuildDBMockRecorder) GetConfig(ctx, guildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockGuildDB)(nil).GetConfig), ctx, guildID)
}

// SaveConfig mocks base method.
func (m *MockGuildDB) SaveConfig(ctx context.Context, config *guildtypes.GuildConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", ctx, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig.
func (mr *MockGuildDBMockRecorder) SaveConfig(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockGuildDB)(nil).SaveConfig), ctx, config)
}

// UpdateConfig mocks base method.
func (m *MockGuildDB) UpdateConfig(ctx context.Context, guildID sharedtypes.GuildID, updates map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfig", ctx, guildID, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockGuildDBMockRecorder) UpdateConfig(ctx, guildID, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockGuildDB)(nil).UpdateConfig), ctx, guildID, updates)
}

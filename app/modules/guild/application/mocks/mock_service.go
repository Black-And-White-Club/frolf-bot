// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/guild/application/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/guild/application/interface.go -destination=./app/modules/guild/application/mocks/mock_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	guildtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/guild"
	sharedtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/shared"
	guildservice "github.com/Black-And-White-Club/frolf-bot/app/modules/guild/application"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateGuildConfig mocks base method.
func (m *MockService) CreateGuildConfig(ctx context.Context, config *guildtypes.GuildConfig) (guildservice.GuildOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGuildConfig", ctx, config)
	ret0, _ := ret[0].(guildservice.GuildOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGuildConfig indicates an expected call of CreateGuildConfig.
func (mr *MockServiceMockRecorder) CreateGuildConfig(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGuildConfig", reflect.TypeOf((*MockService)(nil).CreateGuildConfig), ctx, config)
}

// DeleteGuildConfig mocks base method.
func (m *MockService) DeleteGuildConfig(ctx context.Context, guildID sharedtypes.GuildID) (guildservice.GuildOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGuildConfig", ctx, guildID)
	ret0, _ := ret[0].(guildservice.GuildOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGuildConfig indicates an expected call of DeleteGuildConfig.
func (mr *MockServiceMockRecorder) DeleteGuildConfig(ctx, guildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGuildConfig", reflect.TypeOf((*MockService)(nil).DeleteGuildConfig), ctx, guildID)
}

// GetGuildConfig mocks base method.
func (m *MockService) GetGuildConfig(ctx context.Context, guildID sharedtypes.GuildID) (guildservice.GuildOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuildConfig", ctx, guildID)
	ret0, _ := ret[0].(guildservice.GuildOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuildConfig indicates an expected call of GetGuildConfig.
func (mr *MockServiceMockRecorder) GetGuildConfig(ctx, guildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuildConfig", reflect.TypeOf((*MockService)(nil).GetGuildConfig), ctx, guildID)
}

// UpdateGuildConfig mocks base method.
func (m *MockService) UpdateGuildConfig(ctx context.Context, config *guildtypes.GuildConfig) (guildservice.GuildOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGuildConfig", ctx, config)
	ret0, _ := ret[0].(guildservice.GuildOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGuildConfig indicates an expected call of UpdateGuildConfig.
func (mr *MockServiceMockRecorder) UpdateGuildConfig(ctx, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGuildConfig", reflect.TypeOf((*MockService)(nil).UpdateGuildConfig), ctx, config)
}

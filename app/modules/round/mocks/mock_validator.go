// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/round/utils/validator.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/round/utils/validator.go -destination=./app/modules/round/mocks/mock_validator.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	roundtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/round"
	gomock "go.uber.org/mock/gomock"
)

// MockRoundValidator is a mock of RoundValidator interface.
type MockRoundValidator struct {
	ctrl     *gomock.Controller
	recorder *MockRoundValidatorMockRecorder
	isgomock struct{}
}

// MockRoundValidatorMockRecorder is the mock recorder for MockRoundValidator.
type MockRoundValidatorMockRecorder struct {
	mock *MockRoundValidator
}

// NewMockRoundValidator creates a new mock instance.
func NewMockRoundValidator(ctrl *gomock.Controller) *MockRoundValidator {
	mock := &MockRoundValidator{ctrl: ctrl}
	mock.recorder = &MockRoundValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoundValidator) EXPECT() *MockRoundValidatorMockRecorder {
	return m.recorder
}

// ValidateBaseRoundPayload mocks base method.
func (m *MockRoundValidator) ValidateBaseRoundPayload(input roundtypes.BaseRoundPayload) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateBaseRoundPayload", input)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ValidateBaseRoundPayload indicates an expected call of ValidateBaseRoundPayload.
func (mr *MockRoundValidatorMockRecorder) ValidateBaseRoundPayload(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateBaseRoundPayload", reflect.TypeOf((*MockRoundValidator)(nil).ValidateBaseRoundPayload), input)
}

// ValidateRoundInput mocks base method.
func (m *MockRoundValidator) ValidateRoundInput(input roundtypes.CreateRoundInput) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRoundInput", input)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ValidateRoundInput indicates an expected call of ValidateRoundInput.
func (mr *MockRoundValidatorMockRecorder) ValidateRoundInput(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRoundInput", reflect.TypeOf((*MockRoundValidator)(nil).ValidateRoundInput), input)
}

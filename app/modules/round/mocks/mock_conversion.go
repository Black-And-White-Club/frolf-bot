// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/round/time_utils/time_conversion.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/round/time_utils/time_conversion.go -destination=./app/modules/round/mocks/mock_conversion.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	roundtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/round"
	roundutil "github.com/Black-And-White-Club/frolf-bot/app/modules/round/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockTimeParserInterface is a mock of TimeParserInterface interface.
type MockTimeParserInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTimeParserInterfaceMockRecorder
	isgomock struct{}
}

// MockTimeParserInterfaceMockRecorder is the mock recorder for MockTimeParserInterface.
type MockTimeParserInterfaceMockRecorder struct {
	mock *MockTimeParserInterface
}

// NewMockTimeParserInterface creates a new mock instance.
func NewMockTimeParserInterface(ctrl *gomock.Controller) *MockTimeParserInterface {
	mock := &MockTimeParserInterface{ctrl: ctrl}
	mock.recorder = &MockTimeParserInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeParserInterface) EXPECT() *MockTimeParserInterfaceMockRecorder {
	return m.recorder
}

// GetTimezoneFromInput mocks base method.
func (m *MockTimeParserInterface) GetTimezoneFromInput(input string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimezoneFromInput", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetTimezoneFromInput indicates an expected call of GetTimezoneFromInput.
func (mr *MockTimeParserInterfaceMockRecorder) GetTimezoneFromInput(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimezoneFromInput", reflect.TypeOf((*MockTimeParserInterface)(nil).GetTimezoneFromInput), input)
}

// ParseUserTimeInput mocks base method.
func (m *MockTimeParserInterface) ParseUserTimeInput(startTimeStr string, timezone roundtypes.Timezone, clock roundutil.Clock) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseUserTimeInput", startTimeStr, timezone, clock)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUserTimeInput indicates an expected call of ParseUserTimeInput.
func (mr *MockTimeParserInterfaceMockRecorder) ParseUserTimeInput(startTimeStr, timezone, clock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUserTimeInput", reflect.TypeOf((*MockTimeParserInterface)(nil).ParseUserTimeInput), startTimeStr, timezone, clock)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/round/utils/clock.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/round/utils/clock.go -destination=./app/modules/round/mocks/mock_clock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockClock is a mock of Clock interface.
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *MockClockMockRecorder
	isgomock struct{}
}

// MockClockMockRecorder is the mock recorder for MockClock.
type MockClockMockRecorder struct {
	mock *MockClock
}

// NewMockClock creates a new mock instance.
func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &MockClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClock) EXPECT() *MockClockMockRecorder {
	return m.recorder
}

// After mocks base method.
func (m *MockClock) After(d time.Duration) <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "After", d)
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// After indicates an expected call of After.
func (mr *MockClockMockRecorder) After(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "After", reflect.TypeOf((*MockClock)(nil).After), d)
}

// LoadLocation mocks base method.
func (m *MockClock) LoadLocation(name string) (*time.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadLocation", name)
	ret0, _ := ret[0].(*time.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadLocation indicates an expected call of LoadLocation.
func (mr *MockClockMockRecorder) LoadLocation(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadLocation", reflect.TypeOf((*MockClock)(nil).LoadLocation), name)
}

// Now mocks base method.
func (m *MockClock) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockClockMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockClock)(nil).Now))
}

// NowUTC mocks base method.
func (m *MockClock) NowUTC() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NowUTC")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// NowUTC indicates an expected call of NowUTC.
func (mr *MockClockMockRecorder) NowUTC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NowUTC", reflect.TypeOf((*MockClock)(nil).NowUTC))
}

// Parse mocks base method.
func (m *MockClock) Parse(layout, value string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", layout, value)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockClockMockRecorder) Parse(layout, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockClock)(nil).Parse), layout, value)
}

// Sleep mocks base method.
func (m *MockClock) Sleep(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sleep", d)
}

// Sleep indicates an expected call of Sleep.
func (mr *MockClockMockRecorder) Sleep(d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sleep", reflect.TypeOf((*MockClock)(nil).Sleep), d)
}

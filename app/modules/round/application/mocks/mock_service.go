// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/round/application/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/round/application/interface.go -destination=./app/modules/round/application/mocks/mock_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CheckAllScoresSubmitted mocks base method.
func (m *MockService) CheckAllScoresSubmitted(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAllScoresSubmitted", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAllScoresSubmitted indicates an expected call of CheckAllScoresSubmitted.
func (mr *MockServiceMockRecorder) CheckAllScoresSubmitted(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAllScoresSubmitted", reflect.TypeOf((*MockService)(nil).CheckAllScoresSubmitted), ctx, msg)
}

// CheckParticipantTag mocks base method.
func (m *MockService) CheckParticipantTag(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckParticipantTag", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckParticipantTag indicates an expected call of CheckParticipantTag.
func (mr *MockServiceMockRecorder) CheckParticipantTag(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckParticipantTag", reflect.TypeOf((*MockService)(nil).CheckParticipantTag), ctx, msg)
}

// CheckRoundExists mocks base method.
func (m *MockService) CheckRoundExists(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRoundExists", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRoundExists indicates an expected call of CheckRoundExists.
func (mr *MockServiceMockRecorder) CheckRoundExists(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRoundExists", reflect.TypeOf((*MockService)(nil).CheckRoundExists), ctx, msg)
}

// CheckUserAuthorization mocks base method.
func (m *MockService) CheckUserAuthorization(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserAuthorization", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUserAuthorization indicates an expected call of CheckUserAuthorization.
func (mr *MockServiceMockRecorder) CheckUserAuthorization(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserAuthorization", reflect.TypeOf((*MockService)(nil).CheckUserAuthorization), ctx, msg)
}

// DeleteRound mocks base method.
func (m *MockService) DeleteRound(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRound", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRound indicates an expected call of DeleteRound.
func (mr *MockServiceMockRecorder) DeleteRound(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRound", reflect.TypeOf((*MockService)(nil).DeleteRound), ctx, msg)
}

// FinalizeRound mocks base method.
func (m *MockService) FinalizeRound(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeRound", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeRound indicates an expected call of FinalizeRound.
func (mr *MockServiceMockRecorder) FinalizeRound(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeRound", reflect.TypeOf((*MockService)(nil).FinalizeRound), ctx, msg)
}

// GetRound mocks base method.
func (m *MockService) GetRound(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRound", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRound indicates an expected call of GetRound.
func (mr *MockServiceMockRecorder) GetRound(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRound", reflect.TypeOf((*MockService)(nil).GetRound), ctx, msg)
}

// NotifyScoreModule mocks base method.
func (m *MockService) NotifyScoreModule(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyScoreModule", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyScoreModule indicates an expected call of NotifyScoreModule.
func (mr *MockServiceMockRecorder) NotifyScoreModule(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyScoreModule", reflect.TypeOf((*MockService)(nil).NotifyScoreModule), ctx, msg)
}

// ParticipantTagFound mocks base method.
func (m *MockService) ParticipantTagFound(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipantTagFound", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParticipantTagFound indicates an expected call of ParticipantTagFound.
func (mr *MockServiceMockRecorder) ParticipantTagFound(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipantTagFound", reflect.TypeOf((*MockService)(nil).ParticipantTagFound), ctx, msg)
}

// ParticipantTagNotFound mocks base method.
func (m *MockService) ParticipantTagNotFound(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipantTagNotFound", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParticipantTagNotFound indicates an expected call of ParticipantTagNotFound.
func (mr *MockServiceMockRecorder) ParticipantTagNotFound(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipantTagNotFound", reflect.TypeOf((*MockService)(nil).ParticipantTagNotFound), ctx, msg)
}

// ProcessRoundReminder mocks base method.
func (m *MockService) ProcessRoundReminder(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRoundReminder", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessRoundReminder indicates an expected call of ProcessRoundReminder.
func (mr *MockServiceMockRecorder) ProcessRoundReminder(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRoundReminder", reflect.TypeOf((*MockService)(nil).ProcessRoundReminder), msg)
}

// ProcessRoundStart mocks base method.
func (m *MockService) ProcessRoundStart(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRoundStart", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessRoundStart indicates an expected call of ProcessRoundStart.
func (mr *MockServiceMockRecorder) ProcessRoundStart(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRoundStart", reflect.TypeOf((*MockService)(nil).ProcessRoundStart), msg)
}

// PublishRoundCreated mocks base method.
func (m *MockService) PublishRoundCreated(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRoundCreated", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishRoundCreated indicates an expected call of PublishRoundCreated.
func (mr *MockServiceMockRecorder) PublishRoundCreated(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRoundCreated", reflect.TypeOf((*MockService)(nil).PublishRoundCreated), ctx, msg)
}

// RequestTagNumber mocks base method.
func (m *MockService) RequestTagNumber(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestTagNumber", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestTagNumber indicates an expected call of RequestTagNumber.
func (mr *MockServiceMockRecorder) RequestTagNumber(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestTagNumber", reflect.TypeOf((*MockService)(nil).RequestTagNumber), ctx, msg)
}

// ScheduleRoundEvents mocks base method.
func (m *MockService) ScheduleRoundEvents(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleRoundEvents", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleRoundEvents indicates an expected call of ScheduleRoundEvents.
func (mr *MockServiceMockRecorder) ScheduleRoundEvents(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleRoundEvents", reflect.TypeOf((*MockService)(nil).ScheduleRoundEvents), ctx, msg)
}

// StoreRound mocks base method.
func (m *MockService) StoreRound(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRound", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRound indicates an expected call of StoreRound.
func (mr *MockServiceMockRecorder) StoreRound(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRound", reflect.TypeOf((*MockService)(nil).StoreRound), ctx, msg)
}

// StoreRoundUpdate mocks base method.
func (m *MockService) StoreRoundUpdate(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRoundUpdate", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRoundUpdate indicates an expected call of StoreRoundUpdate.
func (mr *MockServiceMockRecorder) StoreRoundUpdate(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRoundUpdate", reflect.TypeOf((*MockService)(nil).StoreRoundUpdate), ctx, msg)
}

// TagNumberRequest mocks base method.
func (m *MockService) TagNumberRequest(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagNumberRequest", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagNumberRequest indicates an expected call of TagNumberRequest.
func (mr *MockServiceMockRecorder) TagNumberRequest(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagNumberRequest", reflect.TypeOf((*MockService)(nil).TagNumberRequest), ctx, msg)
}

// TagNumberResponse mocks base method.
func (m *MockService) TagNumberResponse(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagNumberResponse", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagNumberResponse indicates an expected call of TagNumberResponse.
func (mr *MockServiceMockRecorder) TagNumberResponse(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagNumberResponse", reflect.TypeOf((*MockService)(nil).TagNumberResponse), ctx, msg)
}

// UpdateDiscordEventID mocks base method.
func (m *MockService) UpdateDiscordEventID(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDiscordEventID", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDiscordEventID indicates an expected call of UpdateDiscordEventID.
func (mr *MockServiceMockRecorder) UpdateDiscordEventID(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscordEventID", reflect.TypeOf((*MockService)(nil).UpdateDiscordEventID), ctx, msg)
}

// UpdateParticipantScore mocks base method.
func (m *MockService) UpdateParticipantScore(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParticipantScore", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateParticipantScore indicates an expected call of UpdateParticipantScore.
func (mr *MockServiceMockRecorder) UpdateParticipantScore(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParticipantScore", reflect.TypeOf((*MockService)(nil).UpdateParticipantScore), ctx, msg)
}

// UpdateRoundEntity mocks base method.
func (m *MockService) UpdateRoundEntity(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoundEntity", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoundEntity indicates an expected call of UpdateRoundEntity.
func (mr *MockServiceMockRecorder) UpdateRoundEntity(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoundEntity", reflect.TypeOf((*MockService)(nil).UpdateRoundEntity), ctx, msg)
}

// UpdateScheduledRoundEvents mocks base method.
func (m *MockService) UpdateScheduledRoundEvents(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScheduledRoundEvents", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScheduledRoundEvents indicates an expected call of UpdateScheduledRoundEvents.
func (mr *MockServiceMockRecorder) UpdateScheduledRoundEvents(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScheduledRoundEvents", reflect.TypeOf((*MockService)(nil).UpdateScheduledRoundEvents), ctx, msg)
}

// UserRoleCheckResult mocks base method.
func (m *MockService) UserRoleCheckResult(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRoleCheckResult", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserRoleCheckResult indicates an expected call of UserRoleCheckResult.
func (mr *MockServiceMockRecorder) UserRoleCheckResult(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRoleCheckResult", reflect.TypeOf((*MockService)(nil).UserRoleCheckResult), ctx, msg)
}

// ValidateParticipantJoinRequest mocks base method.
func (m *MockService) ValidateParticipantJoinRequest(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateParticipantJoinRequest", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateParticipantJoinRequest indicates an expected call of ValidateParticipantJoinRequest.
func (mr *MockServiceMockRecorder) ValidateParticipantJoinRequest(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateParticipantJoinRequest", reflect.TypeOf((*MockService)(nil).ValidateParticipantJoinRequest), ctx, msg)
}

// ValidateRoundDeleteRequest mocks base method.
func (m *MockService) ValidateRoundDeleteRequest(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRoundDeleteRequest", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRoundDeleteRequest indicates an expected call of ValidateRoundDeleteRequest.
func (mr *MockServiceMockRecorder) ValidateRoundDeleteRequest(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRoundDeleteRequest", reflect.TypeOf((*MockService)(nil).ValidateRoundDeleteRequest), ctx, msg)
}

// ValidateRoundRequest mocks base method.
func (m *MockService) ValidateRoundRequest(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRoundRequest", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRoundRequest indicates an expected call of ValidateRoundRequest.
func (mr *MockServiceMockRecorder) ValidateRoundRequest(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRoundRequest", reflect.TypeOf((*MockService)(nil).ValidateRoundRequest), ctx, msg)
}

// ValidateRoundUpdateRequest mocks base method.
func (m *MockService) ValidateRoundUpdateRequest(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRoundUpdateRequest", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRoundUpdateRequest indicates an expected call of ValidateRoundUpdateRequest.
func (mr *MockServiceMockRecorder) ValidateRoundUpdateRequest(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRoundUpdateRequest", reflect.TypeOf((*MockService)(nil).ValidateRoundUpdateRequest), ctx, msg)
}

// ValidateScoreUpdateRequest mocks base method.
func (m *MockService) ValidateScoreUpdateRequest(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateScoreUpdateRequest", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateScoreUpdateRequest indicates an expected call of ValidateScoreUpdateRequest.
func (mr *MockServiceMockRecorder) ValidateScoreUpdateRequest(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateScoreUpdateRequest", reflect.TypeOf((*MockService)(nil).ValidateScoreUpdateRequest), ctx, msg)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/round/application/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/round/application/interface.go -destination=./app/modules/round/application/mocks/mock_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	roundevents "github.com/Black-And-White-Club/frolf-bot-shared/events/round"
	roundtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/round"
	sharedtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/shared"
	roundservice "github.com/Black-And-White-Club/frolf-bot/app/modules/round/application"
	roundtime "github.com/Black-And-White-Club/frolf-bot/app/modules/round/time_utils"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CheckAllScoresSubmitted mocks base method.
func (m *MockService) CheckAllScoresSubmitted(ctx context.Context, payload roundevents.ParticipantScoreUpdatedPayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAllScoresSubmitted", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAllScoresSubmitted indicates an expected call of CheckAllScoresSubmitted.
func (mr *MockServiceMockRecorder) CheckAllScoresSubmitted(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAllScoresSubmitted", reflect.TypeOf((*MockService)(nil).CheckAllScoresSubmitted), ctx, payload)
}

// CheckParticipantStatus mocks base method.
func (m *MockService) CheckParticipantStatus(ctx context.Context, payload roundevents.ParticipantJoinRequestPayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckParticipantStatus", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckParticipantStatus indicates an expected call of CheckParticipantStatus.
func (mr *MockServiceMockRecorder) CheckParticipantStatus(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckParticipantStatus", reflect.TypeOf((*MockService)(nil).CheckParticipantStatus), ctx, payload)
}

// DeleteRound mocks base method.
func (m *MockService) DeleteRound(ctx context.Context, payload roundevents.RoundDeleteAuthorizedPayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRound", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRound indicates an expected call of DeleteRound.
func (mr *MockServiceMockRecorder) DeleteRound(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRound", reflect.TypeOf((*MockService)(nil).DeleteRound), ctx, payload)
}

// FinalizeRound mocks base method.
func (m *MockService) FinalizeRound(ctx context.Context, payload roundevents.AllScoresSubmittedPayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeRound", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeRound indicates an expected call of FinalizeRound.
func (mr *MockServiceMockRecorder) FinalizeRound(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeRound", reflect.TypeOf((*MockService)(nil).FinalizeRound), ctx, payload)
}

// GetRound mocks base method.
func (m *MockService) GetRound(ctx context.Context, roundID sharedtypes.RoundID) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRound", ctx, roundID)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRound indicates an expected call of GetRound.
func (mr *MockServiceMockRecorder) GetRound(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRound", reflect.TypeOf((*MockService)(nil).GetRound), ctx, roundID)
}

// NotifyScoreModule mocks base method.
func (m *MockService) NotifyScoreModule(ctx context.Context, payload roundevents.RoundFinalizedPayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyScoreModule", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyScoreModule indicates an expected call of NotifyScoreModule.
func (mr *MockServiceMockRecorder) NotifyScoreModule(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyScoreModule", reflect.TypeOf((*MockService)(nil).NotifyScoreModule), ctx, payload)
}

// ParticipantRemoval mocks base method.
func (m *MockService) ParticipantRemoval(ctx context.Context, payload roundevents.ParticipantRemovalRequestPayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParticipantRemoval", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParticipantRemoval indicates an expected call of ParticipantRemoval.
func (mr *MockServiceMockRecorder) ParticipantRemoval(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParticipantRemoval", reflect.TypeOf((*MockService)(nil).ParticipantRemoval), ctx, payload)
}

// ProcessRoundReminder mocks base method.
func (m *MockService) ProcessRoundReminder(ctx context.Context, payload roundevents.DiscordReminderPayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRoundReminder", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessRoundReminder indicates an expected call of ProcessRoundReminder.
func (mr *MockServiceMockRecorder) ProcessRoundReminder(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRoundReminder", reflect.TypeOf((*MockService)(nil).ProcessRoundReminder), ctx, payload)
}

// ProcessRoundStart mocks base method.
func (m *MockService) ProcessRoundStart(ctx context.Context, payload roundevents.RoundStartedPayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRoundStart", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessRoundStart indicates an expected call of ProcessRoundStart.
func (mr *MockServiceMockRecorder) ProcessRoundStart(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRoundStart", reflect.TypeOf((*MockService)(nil).ProcessRoundStart), ctx, payload)
}

// ScheduleRoundEvents mocks base method.
func (m *MockService) ScheduleRoundEvents(ctx context.Context, payload roundevents.RoundScheduledPayload, discordMessageID string) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleRoundEvents", ctx, payload, discordMessageID)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleRoundEvents indicates an expected call of ScheduleRoundEvents.
func (mr *MockServiceMockRecorder) ScheduleRoundEvents(ctx, payload, discordMessageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleRoundEvents", reflect.TypeOf((*MockService)(nil).ScheduleRoundEvents), ctx, payload, discordMessageID)
}

// StoreRound mocks base method.
func (m *MockService) StoreRound(ctx context.Context, payload roundevents.RoundEntityCreatedPayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRound", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreRound indicates an expected call of StoreRound.
func (mr *MockServiceMockRecorder) StoreRound(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRound", reflect.TypeOf((*MockService)(nil).StoreRound), ctx, payload)
}

// UpdateParticipantScore mocks base method.
func (m *MockService) UpdateParticipantScore(ctx context.Context, payload roundevents.ScoreUpdateValidatedPayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParticipantScore", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateParticipantScore indicates an expected call of UpdateParticipantScore.
func (mr *MockServiceMockRecorder) UpdateParticipantScore(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParticipantScore", reflect.TypeOf((*MockService)(nil).UpdateParticipantScore), ctx, payload)
}

// UpdateParticipantStatus mocks base method.
func (m *MockService) UpdateParticipantStatus(ctx context.Context, payload roundevents.ParticipantJoinRequestPayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParticipantStatus", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateParticipantStatus indicates an expected call of UpdateParticipantStatus.
func (mr *MockServiceMockRecorder) UpdateParticipantStatus(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParticipantStatus", reflect.TypeOf((*MockService)(nil).UpdateParticipantStatus), ctx, payload)
}

// UpdateRoundEntity mocks base method.
func (m *MockService) UpdateRoundEntity(ctx context.Context, payload roundevents.RoundUpdateValidatedPayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoundEntity", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoundEntity indicates an expected call of UpdateRoundEntity.
func (mr *MockServiceMockRecorder) UpdateRoundEntity(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoundEntity", reflect.TypeOf((*MockService)(nil).UpdateRoundEntity), ctx, payload)
}

// UpdateRoundMessageID mocks base method.
func (m *MockService) UpdateRoundMessageID(ctx context.Context, roundID sharedtypes.RoundID, discordMessageID string) (*roundtypes.Round, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoundMessageID", ctx, roundID, discordMessageID)
	ret0, _ := ret[0].(*roundtypes.Round)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoundMessageID indicates an expected call of UpdateRoundMessageID.
func (mr *MockServiceMockRecorder) UpdateRoundMessageID(ctx, roundID, discordMessageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoundMessageID", reflect.TypeOf((*MockService)(nil).UpdateRoundMessageID), ctx, roundID, discordMessageID)
}

// UpdateScheduledRoundEvents mocks base method.
func (m *MockService) UpdateScheduledRoundEvents(ctx context.Context, payload roundevents.RoundScheduleUpdatePayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScheduledRoundEvents", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScheduledRoundEvents indicates an expected call of UpdateScheduledRoundEvents.
func (mr *MockServiceMockRecorder) UpdateScheduledRoundEvents(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScheduledRoundEvents", reflect.TypeOf((*MockService)(nil).UpdateScheduledRoundEvents), ctx, payload)
}

// UpdateScheduledRoundsWithNewTags mocks base method.
func (m *MockService) UpdateScheduledRoundsWithNewTags(ctx context.Context, payload roundevents.ScheduledRoundTagUpdatePayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScheduledRoundsWithNewTags", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScheduledRoundsWithNewTags indicates an expected call of UpdateScheduledRoundsWithNewTags.
func (mr *MockServiceMockRecorder) UpdateScheduledRoundsWithNewTags(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScheduledRoundsWithNewTags", reflect.TypeOf((*MockService)(nil).UpdateScheduledRoundsWithNewTags), ctx, payload)
}

// ValidateAndProcessRound mocks base method.
func (m *MockService) ValidateAndProcessRound(ctx context.Context, payload roundevents.CreateRoundRequestedPayload, timeParser roundtime.TimeParserInterface) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAndProcessRound", ctx, payload, timeParser)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAndProcessRound indicates an expected call of ValidateAndProcessRound.
func (mr *MockServiceMockRecorder) ValidateAndProcessRound(ctx, payload, timeParser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAndProcessRound", reflect.TypeOf((*MockService)(nil).ValidateAndProcessRound), ctx, payload, timeParser)
}

// ValidateAndProcessRoundUpdate mocks base method.
func (m *MockService) ValidateAndProcessRoundUpdate(ctx context.Context, payload roundevents.UpdateRoundRequestedPayload, timeParser roundtime.TimeParserInterface) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAndProcessRoundUpdate", ctx, payload, timeParser)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAndProcessRoundUpdate indicates an expected call of ValidateAndProcessRoundUpdate.
func (mr *MockServiceMockRecorder) ValidateAndProcessRoundUpdate(ctx, payload, timeParser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAndProcessRoundUpdate", reflect.TypeOf((*MockService)(nil).ValidateAndProcessRoundUpdate), ctx, payload, timeParser)
}

// ValidateParticipantJoinRequest mocks base method.
func (m *MockService) ValidateParticipantJoinRequest(ctx context.Context, payload roundevents.ParticipantJoinRequestPayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateParticipantJoinRequest", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateParticipantJoinRequest indicates an expected call of ValidateParticipantJoinRequest.
func (mr *MockServiceMockRecorder) ValidateParticipantJoinRequest(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateParticipantJoinRequest", reflect.TypeOf((*MockService)(nil).ValidateParticipantJoinRequest), ctx, payload)
}

// ValidateRoundDeleteRequest mocks base method.
func (m *MockService) ValidateRoundDeleteRequest(ctx context.Context, payload roundevents.RoundDeleteRequestPayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRoundDeleteRequest", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateRoundDeleteRequest indicates an expected call of ValidateRoundDeleteRequest.
func (mr *MockServiceMockRecorder) ValidateRoundDeleteRequest(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRoundDeleteRequest", reflect.TypeOf((*MockService)(nil).ValidateRoundDeleteRequest), ctx, payload)
}

// ValidateScoreUpdateRequest mocks base method.
func (m *MockService) ValidateScoreUpdateRequest(ctx context.Context, payload roundevents.ScoreUpdateRequestPayload) (roundservice.RoundOperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateScoreUpdateRequest", ctx, payload)
	ret0, _ := ret[0].(roundservice.RoundOperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateScoreUpdateRequest indicates an expected call of ValidateScoreUpdateRequest.
func (mr *MockServiceMockRecorder) ValidateScoreUpdateRequest(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateScoreUpdateRequest", reflect.TypeOf((*MockService)(nil).ValidateScoreUpdateRequest), ctx, payload)
}

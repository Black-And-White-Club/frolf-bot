// Code generated by MockGen. DO NOT EDIT.
// Source: app/modules/round/application/interface.go
//
// Generated by this command:
//
//	mockgen -source=app/modules/round/application/interface.go -destination=app/modules/round/application/mocks/mock_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	roundevents "github.com/Black-And-White-Club/tcr-bot/app/modules/round/domain/events"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateRound mocks base method.
func (m *MockService) CreateRound(ctx context.Context, input roundevents.RoundCreateRequestPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRound", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRound indicates an expected call of CreateRound.
func (mr *MockServiceMockRecorder) CreateRound(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRound", reflect.TypeOf((*MockService)(nil).CreateRound), ctx, input)
}

// DeleteRound mocks base method.
func (m *MockService) DeleteRound(ctx context.Context, event *roundevents.RoundDeletedPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRound", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRound indicates an expected call of DeleteRound.
func (mr *MockServiceMockRecorder) DeleteRound(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRound", reflect.TypeOf((*MockService)(nil).DeleteRound), ctx, event)
}

// FinalizeRound mocks base method.
func (m *MockService) FinalizeRound(ctx context.Context, event *roundevents.RoundFinalizedPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeRound", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeRound indicates an expected call of FinalizeRound.
func (mr *MockServiceMockRecorder) FinalizeRound(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeRound", reflect.TypeOf((*MockService)(nil).FinalizeRound), ctx, event)
}

// JoinRound mocks base method.
func (m *MockService) JoinRound(ctx context.Context, event *roundevents.ParticipantResponsePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinRound", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinRound indicates an expected call of JoinRound.
func (mr *MockServiceMockRecorder) JoinRound(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinRound", reflect.TypeOf((*MockService)(nil).JoinRound), ctx, event)
}

// StartRound mocks base method.
func (m *MockService) StartRound(ctx context.Context, event *roundevents.RoundStartedPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRound", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartRound indicates an expected call of StartRound.
func (mr *MockServiceMockRecorder) StartRound(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRound", reflect.TypeOf((*MockService)(nil).StartRound), ctx, event)
}

// UpdateRound mocks base method.
func (m *MockService) UpdateRound(ctx context.Context, event *roundevents.RoundUpdatedPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRound", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRound indicates an expected call of UpdateRound.
func (mr *MockServiceMockRecorder) UpdateRound(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRound", reflect.TypeOf((*MockService)(nil).UpdateRound), ctx, event)
}

// UpdateScore mocks base method.
func (m *MockService) UpdateScore(ctx context.Context, event *roundevents.ScoreUpdatedPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScore", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScore indicates an expected call of UpdateScore.
func (mr *MockServiceMockRecorder) UpdateScore(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScore", reflect.TypeOf((*MockService)(nil).UpdateScore), ctx, event)
}

// UpdateScoreAdmin mocks base method.
func (m *MockService) UpdateScoreAdmin(ctx context.Context, event *roundevents.ScoreUpdatedPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScoreAdmin", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScoreAdmin indicates an expected call of UpdateScoreAdmin.
func (mr *MockServiceMockRecorder) UpdateScoreAdmin(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScoreAdmin", reflect.TypeOf((*MockService)(nil).UpdateScoreAdmin), ctx, event)
}

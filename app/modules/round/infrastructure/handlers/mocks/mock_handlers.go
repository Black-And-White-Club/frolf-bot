// Code generated by MockGen. DO NOT EDIT.
// Source: app/modules/round/infrastructure/handlers/interface.go
//
// Generated by this command:
//
//	mockgen -source=app/modules/round/infrastructure/handlers/interface.go -destination=app/modules/round/infrastructure/handlers/mocks/mock_handlers.go -package=mocks -mock_names Handlers=MockHandlers
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockHandlers is a mock of Handlers interface.
type MockHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockHandlersMockRecorder
	isgomock struct{}
}

// MockHandlersMockRecorder is the mock recorder for MockHandlers.
type MockHandlersMockRecorder struct {
	mock *MockHandlers
}

// NewMockHandlers creates a new mock instance.
func NewMockHandlers(ctrl *gomock.Controller) *MockHandlers {
	mock := &MockHandlers{ctrl: ctrl}
	mock.recorder = &MockHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlers) EXPECT() *MockHandlersMockRecorder {
	return m.recorder
}

// HandleCreateRound mocks base method.
func (m *MockHandlers) HandleCreateRound(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCreateRound", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleCreateRound indicates an expected call of HandleCreateRound.
func (mr *MockHandlersMockRecorder) HandleCreateRound(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreateRound", reflect.TypeOf((*MockHandlers)(nil).HandleCreateRound), ctx, msg)
}

// HandleDeleteRound mocks base method.
func (m *MockHandlers) HandleDeleteRound(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDeleteRound", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDeleteRound indicates an expected call of HandleDeleteRound.
func (mr *MockHandlersMockRecorder) HandleDeleteRound(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeleteRound", reflect.TypeOf((*MockHandlers)(nil).HandleDeleteRound), ctx, msg)
}

// HandleFinalizeRound mocks base method.
func (m *MockHandlers) HandleFinalizeRound(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleFinalizeRound", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleFinalizeRound indicates an expected call of HandleFinalizeRound.
func (mr *MockHandlersMockRecorder) HandleFinalizeRound(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFinalizeRound", reflect.TypeOf((*MockHandlers)(nil).HandleFinalizeRound), ctx, msg)
}

// HandleParticipantResponse mocks base method.
func (m *MockHandlers) HandleParticipantResponse(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleParticipantResponse", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleParticipantResponse indicates an expected call of HandleParticipantResponse.
func (mr *MockHandlersMockRecorder) HandleParticipantResponse(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleParticipantResponse", reflect.TypeOf((*MockHandlers)(nil).HandleParticipantResponse), ctx, msg)
}

// HandleScoreUpdated mocks base method.
func (m *MockHandlers) HandleScoreUpdated(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleScoreUpdated", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleScoreUpdated indicates an expected call of HandleScoreUpdated.
func (mr *MockHandlersMockRecorder) HandleScoreUpdated(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleScoreUpdated", reflect.TypeOf((*MockHandlers)(nil).HandleScoreUpdated), ctx, msg)
}

// HandleStartRound mocks base method.
func (m *MockHandlers) HandleStartRound(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleStartRound", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleStartRound indicates an expected call of HandleStartRound.
func (mr *MockHandlersMockRecorder) HandleStartRound(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleStartRound", reflect.TypeOf((*MockHandlers)(nil).HandleStartRound), ctx, msg)
}

// HandleUpdateRound mocks base method.
func (m *MockHandlers) HandleUpdateRound(ctx context.Context, msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUpdateRound", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleUpdateRound indicates an expected call of HandleUpdateRound.
func (mr *MockHandlersMockRecorder) HandleUpdateRound(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUpdateRound", reflect.TypeOf((*MockHandlers)(nil).HandleUpdateRound), ctx, msg)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/round/infrastructure/handlers/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/round/infrastructure/handlers/interface.go -destination=./app/modules/round/infrastructure/handlers/mocks/mock_handlers.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockHandlers is a mock of Handlers interface.
type MockHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockHandlersMockRecorder
	isgomock struct{}
}

// MockHandlersMockRecorder is the mock recorder for MockHandlers.
type MockHandlersMockRecorder struct {
	mock *MockHandlers
}

// NewMockHandlers creates a new mock instance.
func NewMockHandlers(ctrl *gomock.Controller) *MockHandlers {
	mock := &MockHandlers{ctrl: ctrl}
	mock.recorder = &MockHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlers) EXPECT() *MockHandlersMockRecorder {
	return m.recorder
}

// HandleAllScoresSubmitted mocks base method.
func (m *MockHandlers) HandleAllScoresSubmitted(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAllScoresSubmitted", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleAllScoresSubmitted indicates an expected call of HandleAllScoresSubmitted.
func (mr *MockHandlersMockRecorder) HandleAllScoresSubmitted(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAllScoresSubmitted", reflect.TypeOf((*MockHandlers)(nil).HandleAllScoresSubmitted), msg)
}

// HandleCreateRoundRequest mocks base method.
func (m *MockHandlers) HandleCreateRoundRequest(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCreateRoundRequest", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleCreateRoundRequest indicates an expected call of HandleCreateRoundRequest.
func (mr *MockHandlersMockRecorder) HandleCreateRoundRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCreateRoundRequest", reflect.TypeOf((*MockHandlers)(nil).HandleCreateRoundRequest), msg)
}

// HandleDiscordMessageIDUpdated mocks base method.
func (m *MockHandlers) HandleDiscordMessageIDUpdated(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDiscordMessageIDUpdated", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleDiscordMessageIDUpdated indicates an expected call of HandleDiscordMessageIDUpdated.
func (mr *MockHandlersMockRecorder) HandleDiscordMessageIDUpdated(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDiscordMessageIDUpdated", reflect.TypeOf((*MockHandlers)(nil).HandleDiscordMessageIDUpdated), msg)
}

// HandleGetRoundRequest mocks base method.
func (m *MockHandlers) HandleGetRoundRequest(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleGetRoundRequest", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleGetRoundRequest indicates an expected call of HandleGetRoundRequest.
func (mr *MockHandlersMockRecorder) HandleGetRoundRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGetRoundRequest", reflect.TypeOf((*MockHandlers)(nil).HandleGetRoundRequest), msg)
}

// HandleParticipantDeclined mocks base method.
func (m *MockHandlers) HandleParticipantDeclined(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleParticipantDeclined", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleParticipantDeclined indicates an expected call of HandleParticipantDeclined.
func (mr *MockHandlersMockRecorder) HandleParticipantDeclined(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleParticipantDeclined", reflect.TypeOf((*MockHandlers)(nil).HandleParticipantDeclined), msg)
}

// HandleParticipantJoinRequest mocks base method.
func (m *MockHandlers) HandleParticipantJoinRequest(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleParticipantJoinRequest", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleParticipantJoinRequest indicates an expected call of HandleParticipantJoinRequest.
func (mr *MockHandlersMockRecorder) HandleParticipantJoinRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleParticipantJoinRequest", reflect.TypeOf((*MockHandlers)(nil).HandleParticipantJoinRequest), msg)
}

// HandleParticipantJoinValidationRequest mocks base method.
func (m *MockHandlers) HandleParticipantJoinValidationRequest(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleParticipantJoinValidationRequest", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleParticipantJoinValidationRequest indicates an expected call of HandleParticipantJoinValidationRequest.
func (mr *MockHandlersMockRecorder) HandleParticipantJoinValidationRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleParticipantJoinValidationRequest", reflect.TypeOf((*MockHandlers)(nil).HandleParticipantJoinValidationRequest), msg)
}

// HandleParticipantRemovalRequest mocks base method.
func (m *MockHandlers) HandleParticipantRemovalRequest(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleParticipantRemovalRequest", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleParticipantRemovalRequest indicates an expected call of HandleParticipantRemovalRequest.
func (mr *MockHandlersMockRecorder) HandleParticipantRemovalRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleParticipantRemovalRequest", reflect.TypeOf((*MockHandlers)(nil).HandleParticipantRemovalRequest), msg)
}

// HandleParticipantScoreUpdated mocks base method.
func (m *MockHandlers) HandleParticipantScoreUpdated(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleParticipantScoreUpdated", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleParticipantScoreUpdated indicates an expected call of HandleParticipantScoreUpdated.
func (mr *MockHandlersMockRecorder) HandleParticipantScoreUpdated(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleParticipantScoreUpdated", reflect.TypeOf((*MockHandlers)(nil).HandleParticipantScoreUpdated), msg)
}

// HandleParticipantStatusUpdateRequest mocks base method.
func (m *MockHandlers) HandleParticipantStatusUpdateRequest(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleParticipantStatusUpdateRequest", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleParticipantStatusUpdateRequest indicates an expected call of HandleParticipantStatusUpdateRequest.
func (mr *MockHandlersMockRecorder) HandleParticipantStatusUpdateRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleParticipantStatusUpdateRequest", reflect.TypeOf((*MockHandlers)(nil).HandleParticipantStatusUpdateRequest), msg)
}

// HandleRoundDeleteAuthorized mocks base method.
func (m *MockHandlers) HandleRoundDeleteAuthorized(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundDeleteAuthorized", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoundDeleteAuthorized indicates an expected call of HandleRoundDeleteAuthorized.
func (mr *MockHandlersMockRecorder) HandleRoundDeleteAuthorized(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundDeleteAuthorized", reflect.TypeOf((*MockHandlers)(nil).HandleRoundDeleteAuthorized), msg)
}

// HandleRoundDeleteRequest mocks base method.
func (m *MockHandlers) HandleRoundDeleteRequest(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundDeleteRequest", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoundDeleteRequest indicates an expected call of HandleRoundDeleteRequest.
func (mr *MockHandlersMockRecorder) HandleRoundDeleteRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundDeleteRequest", reflect.TypeOf((*MockHandlers)(nil).HandleRoundDeleteRequest), msg)
}

// HandleRoundDeleteValidated mocks base method.
func (m *MockHandlers) HandleRoundDeleteValidated(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundDeleteValidated", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoundDeleteValidated indicates an expected call of HandleRoundDeleteValidated.
func (mr *MockHandlersMockRecorder) HandleRoundDeleteValidated(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundDeleteValidated", reflect.TypeOf((*MockHandlers)(nil).HandleRoundDeleteValidated), msg)
}

// HandleRoundEntityCreated mocks base method.
func (m *MockHandlers) HandleRoundEntityCreated(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundEntityCreated", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoundEntityCreated indicates an expected call of HandleRoundEntityCreated.
func (mr *MockHandlersMockRecorder) HandleRoundEntityCreated(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundEntityCreated", reflect.TypeOf((*MockHandlers)(nil).HandleRoundEntityCreated), msg)
}

// HandleRoundEventMessageIDUpdate mocks base method.
func (m *MockHandlers) HandleRoundEventMessageIDUpdate(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundEventMessageIDUpdate", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoundEventMessageIDUpdate indicates an expected call of HandleRoundEventMessageIDUpdate.
func (mr *MockHandlersMockRecorder) HandleRoundEventMessageIDUpdate(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundEventMessageIDUpdate", reflect.TypeOf((*MockHandlers)(nil).HandleRoundEventMessageIDUpdate), msg)
}

// HandleRoundFinalized mocks base method.
func (m *MockHandlers) HandleRoundFinalized(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundFinalized", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoundFinalized indicates an expected call of HandleRoundFinalized.
func (mr *MockHandlersMockRecorder) HandleRoundFinalized(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundFinalized", reflect.TypeOf((*MockHandlers)(nil).HandleRoundFinalized), msg)
}

// HandleRoundReminder mocks base method.
func (m *MockHandlers) HandleRoundReminder(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundReminder", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoundReminder indicates an expected call of HandleRoundReminder.
func (mr *MockHandlersMockRecorder) HandleRoundReminder(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundReminder", reflect.TypeOf((*MockHandlers)(nil).HandleRoundReminder), msg)
}

// HandleRoundScheduleUpdate mocks base method.
func (m *MockHandlers) HandleRoundScheduleUpdate(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundScheduleUpdate", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoundScheduleUpdate indicates an expected call of HandleRoundScheduleUpdate.
func (mr *MockHandlersMockRecorder) HandleRoundScheduleUpdate(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundScheduleUpdate", reflect.TypeOf((*MockHandlers)(nil).HandleRoundScheduleUpdate), msg)
}

// HandleRoundStarted mocks base method.
func (m *MockHandlers) HandleRoundStarted(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundStarted", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoundStarted indicates an expected call of HandleRoundStarted.
func (mr *MockHandlersMockRecorder) HandleRoundStarted(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundStarted", reflect.TypeOf((*MockHandlers)(nil).HandleRoundStarted), msg)
}

// HandleRoundUpdateRequest mocks base method.
func (m *MockHandlers) HandleRoundUpdateRequest(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundUpdateRequest", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoundUpdateRequest indicates an expected call of HandleRoundUpdateRequest.
func (mr *MockHandlersMockRecorder) HandleRoundUpdateRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundUpdateRequest", reflect.TypeOf((*MockHandlers)(nil).HandleRoundUpdateRequest), msg)
}

// HandleRoundUpdateValidated mocks base method.
func (m *MockHandlers) HandleRoundUpdateValidated(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundUpdateValidated", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleRoundUpdateValidated indicates an expected call of HandleRoundUpdateValidated.
func (mr *MockHandlersMockRecorder) HandleRoundUpdateValidated(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundUpdateValidated", reflect.TypeOf((*MockHandlers)(nil).HandleRoundUpdateValidated), msg)
}

// HandleScheduledRoundTagUpdate mocks base method.
func (m *MockHandlers) HandleScheduledRoundTagUpdate(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleScheduledRoundTagUpdate", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleScheduledRoundTagUpdate indicates an expected call of HandleScheduledRoundTagUpdate.
func (mr *MockHandlersMockRecorder) HandleScheduledRoundTagUpdate(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleScheduledRoundTagUpdate", reflect.TypeOf((*MockHandlers)(nil).HandleScheduledRoundTagUpdate), msg)
}

// HandleScoreUpdateRequest mocks base method.
func (m *MockHandlers) HandleScoreUpdateRequest(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleScoreUpdateRequest", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleScoreUpdateRequest indicates an expected call of HandleScoreUpdateRequest.
func (mr *MockHandlersMockRecorder) HandleScoreUpdateRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleScoreUpdateRequest", reflect.TypeOf((*MockHandlers)(nil).HandleScoreUpdateRequest), msg)
}

// HandleScoreUpdateValidated mocks base method.
func (m *MockHandlers) HandleScoreUpdateValidated(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleScoreUpdateValidated", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleScoreUpdateValidated indicates an expected call of HandleScoreUpdateValidated.
func (mr *MockHandlersMockRecorder) HandleScoreUpdateValidated(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleScoreUpdateValidated", reflect.TypeOf((*MockHandlers)(nil).HandleScoreUpdateValidated), msg)
}

// HandleTagNumberFound mocks base method.
func (m *MockHandlers) HandleTagNumberFound(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTagNumberFound", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleTagNumberFound indicates an expected call of HandleTagNumberFound.
func (mr *MockHandlersMockRecorder) HandleTagNumberFound(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTagNumberFound", reflect.TypeOf((*MockHandlers)(nil).HandleTagNumberFound), msg)
}

// HandleTagNumberLookupFailed mocks base method.
func (m *MockHandlers) HandleTagNumberLookupFailed(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTagNumberLookupFailed", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleTagNumberLookupFailed indicates an expected call of HandleTagNumberLookupFailed.
func (mr *MockHandlersMockRecorder) HandleTagNumberLookupFailed(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTagNumberLookupFailed", reflect.TypeOf((*MockHandlers)(nil).HandleTagNumberLookupFailed), msg)
}

// HandleTagNumberNotFound mocks base method.
func (m *MockHandlers) HandleTagNumberNotFound(msg *message.Message) ([]*message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTagNumberNotFound", msg)
	ret0, _ := ret[0].([]*message.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleTagNumberNotFound indicates an expected call of HandleTagNumberNotFound.
func (mr *MockHandlersMockRecorder) HandleTagNumberNotFound(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTagNumberNotFound", reflect.TypeOf((*MockHandlers)(nil).HandleTagNumberNotFound), msg)
}

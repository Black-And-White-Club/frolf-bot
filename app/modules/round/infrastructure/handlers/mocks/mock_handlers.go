// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/round/infrastructure/handlers/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/round/infrastructure/handlers/interface.go -destination=./app/modules/round/infrastructure/handlers/mocks/mock_handlers.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	message "github.com/ThreeDotsLabs/watermill/message"
	gomock "go.uber.org/mock/gomock"
)

// MockHandlers is a mock of Handlers interface.
type MockHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockHandlersMockRecorder
	isgomock struct{}
}

// MockHandlersMockRecorder is the mock recorder for MockHandlers.
type MockHandlersMockRecorder struct {
	mock *MockHandlers
}

// NewMockHandlers creates a new mock instance.
func NewMockHandlers(ctrl *gomock.Controller) *MockHandlers {
	mock := &MockHandlers{ctrl: ctrl}
	mock.recorder = &MockHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlers) EXPECT() *MockHandlersMockRecorder {
	return m.recorder
}

// HandleLeaderboardGetTagNumberResponse mocks base method.
func (m *MockHandlers) HandleLeaderboardGetTagNumberResponse(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleLeaderboardGetTagNumberResponse", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleLeaderboardGetTagNumberResponse indicates an expected call of HandleLeaderboardGetTagNumberResponse.
func (mr *MockHandlersMockRecorder) HandleLeaderboardGetTagNumberResponse(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleLeaderboardGetTagNumberResponse", reflect.TypeOf((*MockHandlers)(nil).HandleLeaderboardGetTagNumberResponse), msg)
}

// HandleRoundAllScoresSubmitted mocks base method.
func (m *MockHandlers) HandleRoundAllScoresSubmitted(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundAllScoresSubmitted", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundAllScoresSubmitted indicates an expected call of HandleRoundAllScoresSubmitted.
func (mr *MockHandlersMockRecorder) HandleRoundAllScoresSubmitted(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundAllScoresSubmitted", reflect.TypeOf((*MockHandlers)(nil).HandleRoundAllScoresSubmitted), msg)
}

// HandleRoundCreateRequest mocks base method.
func (m *MockHandlers) HandleRoundCreateRequest(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundCreateRequest", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundCreateRequest indicates an expected call of HandleRoundCreateRequest.
func (mr *MockHandlersMockRecorder) HandleRoundCreateRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundCreateRequest", reflect.TypeOf((*MockHandlers)(nil).HandleRoundCreateRequest), msg)
}

// HandleRoundDeleteAuthorized mocks base method.
func (m *MockHandlers) HandleRoundDeleteAuthorized(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundDeleteAuthorized", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundDeleteAuthorized indicates an expected call of HandleRoundDeleteAuthorized.
func (mr *MockHandlersMockRecorder) HandleRoundDeleteAuthorized(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundDeleteAuthorized", reflect.TypeOf((*MockHandlers)(nil).HandleRoundDeleteAuthorized), msg)
}

// HandleRoundDeleteRequest mocks base method.
func (m *MockHandlers) HandleRoundDeleteRequest(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundDeleteRequest", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundDeleteRequest indicates an expected call of HandleRoundDeleteRequest.
func (mr *MockHandlersMockRecorder) HandleRoundDeleteRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundDeleteRequest", reflect.TypeOf((*MockHandlers)(nil).HandleRoundDeleteRequest), msg)
}

// HandleRoundDeleteValidated mocks base method.
func (m *MockHandlers) HandleRoundDeleteValidated(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundDeleteValidated", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundDeleteValidated indicates an expected call of HandleRoundDeleteValidated.
func (mr *MockHandlersMockRecorder) HandleRoundDeleteValidated(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundDeleteValidated", reflect.TypeOf((*MockHandlers)(nil).HandleRoundDeleteValidated), msg)
}

// HandleRoundEntityCreated mocks base method.
func (m *MockHandlers) HandleRoundEntityCreated(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundEntityCreated", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundEntityCreated indicates an expected call of HandleRoundEntityCreated.
func (mr *MockHandlersMockRecorder) HandleRoundEntityCreated(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundEntityCreated", reflect.TypeOf((*MockHandlers)(nil).HandleRoundEntityCreated), msg)
}

// HandleRoundEntityUpdated mocks base method.
func (m *MockHandlers) HandleRoundEntityUpdated(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundEntityUpdated", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundEntityUpdated indicates an expected call of HandleRoundEntityUpdated.
func (mr *MockHandlersMockRecorder) HandleRoundEntityUpdated(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundEntityUpdated", reflect.TypeOf((*MockHandlers)(nil).HandleRoundEntityUpdated), msg)
}

// HandleRoundFetched mocks base method.
func (m *MockHandlers) HandleRoundFetched(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundFetched", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundFetched indicates an expected call of HandleRoundFetched.
func (mr *MockHandlersMockRecorder) HandleRoundFetched(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundFetched", reflect.TypeOf((*MockHandlers)(nil).HandleRoundFetched), msg)
}

// HandleRoundFinalized mocks base method.
func (m *MockHandlers) HandleRoundFinalized(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundFinalized", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundFinalized indicates an expected call of HandleRoundFinalized.
func (mr *MockHandlersMockRecorder) HandleRoundFinalized(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundFinalized", reflect.TypeOf((*MockHandlers)(nil).HandleRoundFinalized), msg)
}

// HandleRoundParticipantDeclined mocks base method.
func (m *MockHandlers) HandleRoundParticipantDeclined(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundParticipantDeclined", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundParticipantDeclined indicates an expected call of HandleRoundParticipantDeclined.
func (mr *MockHandlersMockRecorder) HandleRoundParticipantDeclined(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundParticipantDeclined", reflect.TypeOf((*MockHandlers)(nil).HandleRoundParticipantDeclined), msg)
}

// HandleRoundParticipantJoinRequest mocks base method.
func (m *MockHandlers) HandleRoundParticipantJoinRequest(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundParticipantJoinRequest", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundParticipantJoinRequest indicates an expected call of HandleRoundParticipantJoinRequest.
func (mr *MockHandlersMockRecorder) HandleRoundParticipantJoinRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundParticipantJoinRequest", reflect.TypeOf((*MockHandlers)(nil).HandleRoundParticipantJoinRequest), msg)
}

// HandleRoundParticipantJoinValidationRequest mocks base method.
func (m *MockHandlers) HandleRoundParticipantJoinValidationRequest(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundParticipantJoinValidationRequest", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundParticipantJoinValidationRequest indicates an expected call of HandleRoundParticipantJoinValidationRequest.
func (mr *MockHandlersMockRecorder) HandleRoundParticipantJoinValidationRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundParticipantJoinValidationRequest", reflect.TypeOf((*MockHandlers)(nil).HandleRoundParticipantJoinValidationRequest), msg)
}

// HandleRoundParticipantRemovalRequest mocks base method.
func (m *MockHandlers) HandleRoundParticipantRemovalRequest(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundParticipantRemovalRequest", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundParticipantRemovalRequest indicates an expected call of HandleRoundParticipantRemovalRequest.
func (mr *MockHandlersMockRecorder) HandleRoundParticipantRemovalRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundParticipantRemovalRequest", reflect.TypeOf((*MockHandlers)(nil).HandleRoundParticipantRemovalRequest), msg)
}

// HandleRoundParticipantScoreUpdated mocks base method.
func (m *MockHandlers) HandleRoundParticipantScoreUpdated(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundParticipantScoreUpdated", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundParticipantScoreUpdated indicates an expected call of HandleRoundParticipantScoreUpdated.
func (mr *MockHandlersMockRecorder) HandleRoundParticipantScoreUpdated(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundParticipantScoreUpdated", reflect.TypeOf((*MockHandlers)(nil).HandleRoundParticipantScoreUpdated), msg)
}

// HandleRoundReminder mocks base method.
func (m *MockHandlers) HandleRoundReminder(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundReminder", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundReminder indicates an expected call of HandleRoundReminder.
func (mr *MockHandlersMockRecorder) HandleRoundReminder(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundReminder", reflect.TypeOf((*MockHandlers)(nil).HandleRoundReminder), msg)
}

// HandleRoundScheduleUpdate mocks base method.
func (m *MockHandlers) HandleRoundScheduleUpdate(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundScheduleUpdate", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundScheduleUpdate indicates an expected call of HandleRoundScheduleUpdate.
func (mr *MockHandlersMockRecorder) HandleRoundScheduleUpdate(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundScheduleUpdate", reflect.TypeOf((*MockHandlers)(nil).HandleRoundScheduleUpdate), msg)
}

// HandleRoundScheduled mocks base method.
func (m *MockHandlers) HandleRoundScheduled(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundScheduled", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundScheduled indicates an expected call of HandleRoundScheduled.
func (mr *MockHandlersMockRecorder) HandleRoundScheduled(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundScheduled", reflect.TypeOf((*MockHandlers)(nil).HandleRoundScheduled), msg)
}

// HandleRoundScoreUpdateRequest mocks base method.
func (m *MockHandlers) HandleRoundScoreUpdateRequest(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundScoreUpdateRequest", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundScoreUpdateRequest indicates an expected call of HandleRoundScoreUpdateRequest.
func (mr *MockHandlersMockRecorder) HandleRoundScoreUpdateRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundScoreUpdateRequest", reflect.TypeOf((*MockHandlers)(nil).HandleRoundScoreUpdateRequest), msg)
}

// HandleRoundScoreUpdateValidated mocks base method.
func (m *MockHandlers) HandleRoundScoreUpdateValidated(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundScoreUpdateValidated", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundScoreUpdateValidated indicates an expected call of HandleRoundScoreUpdateValidated.
func (mr *MockHandlersMockRecorder) HandleRoundScoreUpdateValidated(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundScoreUpdateValidated", reflect.TypeOf((*MockHandlers)(nil).HandleRoundScoreUpdateValidated), msg)
}

// HandleRoundStarted mocks base method.
func (m *MockHandlers) HandleRoundStarted(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundStarted", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundStarted indicates an expected call of HandleRoundStarted.
func (mr *MockHandlersMockRecorder) HandleRoundStarted(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundStarted", reflect.TypeOf((*MockHandlers)(nil).HandleRoundStarted), msg)
}

// HandleRoundStored mocks base method.
func (m *MockHandlers) HandleRoundStored(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundStored", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundStored indicates an expected call of HandleRoundStored.
func (mr *MockHandlersMockRecorder) HandleRoundStored(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundStored", reflect.TypeOf((*MockHandlers)(nil).HandleRoundStored), msg)
}

// HandleRoundTagNumberFound mocks base method.
func (m *MockHandlers) HandleRoundTagNumberFound(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundTagNumberFound", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundTagNumberFound indicates an expected call of HandleRoundTagNumberFound.
func (mr *MockHandlersMockRecorder) HandleRoundTagNumberFound(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundTagNumberFound", reflect.TypeOf((*MockHandlers)(nil).HandleRoundTagNumberFound), msg)
}

// HandleRoundTagNumberNotFound mocks base method.
func (m *MockHandlers) HandleRoundTagNumberNotFound(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundTagNumberNotFound", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundTagNumberNotFound indicates an expected call of HandleRoundTagNumberNotFound.
func (mr *MockHandlersMockRecorder) HandleRoundTagNumberNotFound(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundTagNumberNotFound", reflect.TypeOf((*MockHandlers)(nil).HandleRoundTagNumberNotFound), msg)
}

// HandleRoundTagNumberRequest mocks base method.
func (m *MockHandlers) HandleRoundTagNumberRequest(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundTagNumberRequest", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundTagNumberRequest indicates an expected call of HandleRoundTagNumberRequest.
func (mr *MockHandlersMockRecorder) HandleRoundTagNumberRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundTagNumberRequest", reflect.TypeOf((*MockHandlers)(nil).HandleRoundTagNumberRequest), msg)
}

// HandleRoundToDeleteFetched mocks base method.
func (m *MockHandlers) HandleRoundToDeleteFetched(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundToDeleteFetched", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundToDeleteFetched indicates an expected call of HandleRoundToDeleteFetched.
func (mr *MockHandlersMockRecorder) HandleRoundToDeleteFetched(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundToDeleteFetched", reflect.TypeOf((*MockHandlers)(nil).HandleRoundToDeleteFetched), msg)
}

// HandleRoundUpdateRequest mocks base method.
func (m *MockHandlers) HandleRoundUpdateRequest(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundUpdateRequest", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundUpdateRequest indicates an expected call of HandleRoundUpdateRequest.
func (mr *MockHandlersMockRecorder) HandleRoundUpdateRequest(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundUpdateRequest", reflect.TypeOf((*MockHandlers)(nil).HandleRoundUpdateRequest), msg)
}

// HandleRoundUpdateValidated mocks base method.
func (m *MockHandlers) HandleRoundUpdateValidated(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundUpdateValidated", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundUpdateValidated indicates an expected call of HandleRoundUpdateValidated.
func (mr *MockHandlersMockRecorder) HandleRoundUpdateValidated(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundUpdateValidated", reflect.TypeOf((*MockHandlers)(nil).HandleRoundUpdateValidated), msg)
}

// HandleRoundUserRoleCheckResult mocks base method.
func (m *MockHandlers) HandleRoundUserRoleCheckResult(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundUserRoleCheckResult", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundUserRoleCheckResult indicates an expected call of HandleRoundUserRoleCheckResult.
func (mr *MockHandlersMockRecorder) HandleRoundUserRoleCheckResult(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundUserRoleCheckResult", reflect.TypeOf((*MockHandlers)(nil).HandleRoundUserRoleCheckResult), msg)
}

// HandleRoundValidated mocks base method.
func (m *MockHandlers) HandleRoundValidated(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleRoundValidated", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleRoundValidated indicates an expected call of HandleRoundValidated.
func (mr *MockHandlersMockRecorder) HandleRoundValidated(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleRoundValidated", reflect.TypeOf((*MockHandlers)(nil).HandleRoundValidated), msg)
}

// HandleScheduleRoundEvents mocks base method.
func (m *MockHandlers) HandleScheduleRoundEvents(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleScheduleRoundEvents", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleScheduleRoundEvents indicates an expected call of HandleScheduleRoundEvents.
func (mr *MockHandlersMockRecorder) HandleScheduleRoundEvents(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleScheduleRoundEvents", reflect.TypeOf((*MockHandlers)(nil).HandleScheduleRoundEvents), msg)
}

// HandleUpdateDiscordEventID mocks base method.
func (m *MockHandlers) HandleUpdateDiscordEventID(msg *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUpdateDiscordEventID", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleUpdateDiscordEventID indicates an expected call of HandleUpdateDiscordEventID.
func (mr *MockHandlersMockRecorder) HandleUpdateDiscordEventID(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUpdateDiscordEventID", reflect.TypeOf((*MockHandlers)(nil).HandleUpdateDiscordEventID), msg)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/round/infrastructure/repositories/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/round/infrastructure/repositories/interface.go -destination=./app/modules/round/infrastructure/repositories/mocks/mock_db.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	roundtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/round"
	gomock "go.uber.org/mock/gomock"
)

// MockRoundDBInterface is a mock of RoundDBInterface interface.
type MockRoundDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRoundDBInterfaceMockRecorder
	isgomock struct{}
}

// MockRoundDBInterfaceMockRecorder is the mock recorder for MockRoundDBInterface.
type MockRoundDBInterfaceMockRecorder struct {
	mock *MockRoundDBInterface
}

// NewMockRoundDBInterface creates a new mock instance.
func NewMockRoundDBInterface(ctrl *gomock.Controller) *MockRoundDBInterface {
	mock := &MockRoundDBInterface{ctrl: ctrl}
	mock.recorder = &MockRoundDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoundDBInterface) EXPECT() *MockRoundDBInterfaceMockRecorder {
	return m.recorder
}

// CreateRound mocks base method.
func (m *MockRoundDBInterface) CreateRound(ctx context.Context, round *roundtypes.Round) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRound", ctx, round)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRound indicates an expected call of CreateRound.
func (mr *MockRoundDBInterfaceMockRecorder) CreateRound(ctx, round any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRound", reflect.TypeOf((*MockRoundDBInterface)(nil).CreateRound), ctx, round)
}

// DeleteRound mocks base method.
func (m *MockRoundDBInterface) DeleteRound(ctx context.Context, roundID roundtypes.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRound", ctx, roundID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRound indicates an expected call of DeleteRound.
func (mr *MockRoundDBInterfaceMockRecorder) DeleteRound(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRound", reflect.TypeOf((*MockRoundDBInterface)(nil).DeleteRound), ctx, roundID)
}

// GetParticipant mocks base method.
func (m *MockRoundDBInterface) GetParticipant(ctx context.Context, roundID roundtypes.ID, userID string) (*roundtypes.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipant", ctx, roundID, userID)
	ret0, _ := ret[0].(*roundtypes.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipant indicates an expected call of GetParticipant.
func (mr *MockRoundDBInterfaceMockRecorder) GetParticipant(ctx, roundID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipant", reflect.TypeOf((*MockRoundDBInterface)(nil).GetParticipant), ctx, roundID, userID)
}

// GetParticipants mocks base method.
func (m *MockRoundDBInterface) GetParticipants(ctx context.Context, roundID roundtypes.ID) ([]roundtypes.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipants", ctx, roundID)
	ret0, _ := ret[0].([]roundtypes.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipants indicates an expected call of GetParticipants.
func (mr *MockRoundDBInterfaceMockRecorder) GetParticipants(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipants", reflect.TypeOf((*MockRoundDBInterface)(nil).GetParticipants), ctx, roundID)
}

// GetParticipantsWithResponses mocks base method.
func (m *MockRoundDBInterface) GetParticipantsWithResponses(ctx context.Context, roundID roundtypes.ID, responses ...string) ([]roundtypes.Participant, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, roundID}
	for _, a := range responses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParticipantsWithResponses", varargs...)
	ret0, _ := ret[0].([]roundtypes.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipantsWithResponses indicates an expected call of GetParticipantsWithResponses.
func (mr *MockRoundDBInterfaceMockRecorder) GetParticipantsWithResponses(ctx, roundID any, responses ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, roundID}, responses...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipantsWithResponses", reflect.TypeOf((*MockRoundDBInterface)(nil).GetParticipantsWithResponses), varargs...)
}

// GetRound mocks base method.
func (m *MockRoundDBInterface) GetRound(ctx context.Context, roundID roundtypes.ID) (*roundtypes.Round, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRound", ctx, roundID)
	ret0, _ := ret[0].(*roundtypes.Round)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRound indicates an expected call of GetRound.
func (mr *MockRoundDBInterfaceMockRecorder) GetRound(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRound", reflect.TypeOf((*MockRoundDBInterface)(nil).GetRound), ctx, roundID)
}

// GetRoundState mocks base method.
func (m *MockRoundDBInterface) GetRoundState(ctx context.Context, roundID roundtypes.ID) (roundtypes.RoundState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoundState", ctx, roundID)
	ret0, _ := ret[0].(roundtypes.RoundState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoundState indicates an expected call of GetRoundState.
func (mr *MockRoundDBInterfaceMockRecorder) GetRoundState(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoundState", reflect.TypeOf((*MockRoundDBInterface)(nil).GetRoundState), ctx, roundID)
}

// GetUpcomingRounds mocks base method.
func (m *MockRoundDBInterface) GetUpcomingRounds(ctx context.Context, startTime, endTime time.Time) ([]*roundtypes.Round, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcomingRounds", ctx, startTime, endTime)
	ret0, _ := ret[0].([]*roundtypes.Round)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcomingRounds indicates an expected call of GetUpcomingRounds.
func (mr *MockRoundDBInterfaceMockRecorder) GetUpcomingRounds(ctx, startTime, endTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcomingRounds", reflect.TypeOf((*MockRoundDBInterface)(nil).GetUpcomingRounds), ctx, startTime, endTime)
}

// LogRound mocks base method.
func (m *MockRoundDBInterface) LogRound(ctx context.Context, round *roundtypes.Round) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogRound", ctx, round)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogRound indicates an expected call of LogRound.
func (mr *MockRoundDBInterfaceMockRecorder) LogRound(ctx, round any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogRound", reflect.TypeOf((*MockRoundDBInterface)(nil).LogRound), ctx, round)
}

// RemoveParticipant mocks base method.
func (m *MockRoundDBInterface) RemoveParticipant(ctx context.Context, roundID roundtypes.ID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveParticipant", ctx, roundID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveParticipant indicates an expected call of RemoveParticipant.
func (mr *MockRoundDBInterfaceMockRecorder) RemoveParticipant(ctx, roundID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveParticipant", reflect.TypeOf((*MockRoundDBInterface)(nil).RemoveParticipant), ctx, roundID, userID)
}

// UpdateDiscordEventID mocks base method.
func (m *MockRoundDBInterface) UpdateDiscordEventID(ctx context.Context, roundID roundtypes.ID, discordEventID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDiscordEventID", ctx, roundID, discordEventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDiscordEventID indicates an expected call of UpdateDiscordEventID.
func (mr *MockRoundDBInterfaceMockRecorder) UpdateDiscordEventID(ctx, roundID, discordEventID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscordEventID", reflect.TypeOf((*MockRoundDBInterface)(nil).UpdateDiscordEventID), ctx, roundID, discordEventID)
}

// UpdateParticipant mocks base method.
func (m *MockRoundDBInterface) UpdateParticipant(ctx context.Context, roundID roundtypes.ID, participant roundtypes.Participant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParticipant", ctx, roundID, participant)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateParticipant indicates an expected call of UpdateParticipant.
func (mr *MockRoundDBInterfaceMockRecorder) UpdateParticipant(ctx, roundID, participant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParticipant", reflect.TypeOf((*MockRoundDBInterface)(nil).UpdateParticipant), ctx, roundID, participant)
}

// UpdateParticipantScore mocks base method.
func (m *MockRoundDBInterface) UpdateParticipantScore(ctx context.Context, roundID roundtypes.ID, participantID string, score int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParticipantScore", ctx, roundID, participantID, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateParticipantScore indicates an expected call of UpdateParticipantScore.
func (mr *MockRoundDBInterfaceMockRecorder) UpdateParticipantScore(ctx, roundID, participantID, score any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParticipantScore", reflect.TypeOf((*MockRoundDBInterface)(nil).UpdateParticipantScore), ctx, roundID, participantID, score)
}

// UpdateRound mocks base method.
func (m *MockRoundDBInterface) UpdateRound(ctx context.Context, roundID roundtypes.ID, round *roundtypes.Round) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRound", ctx, roundID, round)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRound indicates an expected call of UpdateRound.
func (mr *MockRoundDBInterfaceMockRecorder) UpdateRound(ctx, roundID, round any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRound", reflect.TypeOf((*MockRoundDBInterface)(nil).UpdateRound), ctx, roundID, round)
}

// UpdateRoundState mocks base method.
func (m *MockRoundDBInterface) UpdateRoundState(ctx context.Context, roundID roundtypes.ID, state roundtypes.RoundState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoundState", ctx, roundID, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoundState indicates an expected call of UpdateRoundState.
func (mr *MockRoundDBInterfaceMockRecorder) UpdateRoundState(ctx, roundID, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoundState", reflect.TypeOf((*MockRoundDBInterface)(nil).UpdateRoundState), ctx, roundID, state)
}

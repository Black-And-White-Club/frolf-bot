// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/round/infrastructure/repositories/interface.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/round/infrastructure/repositories/interface.go -destination=./app/modules/round/infrastructure/repositories/mocks/mock_db.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	roundtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/round"
	sharedtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/shared"
	bun "github.com/uptrace/bun"
	gomock "go.uber.org/mock/gomock"
)

// MockRoundDB is a mock of RoundDB interface.
type MockRoundDB struct {
	ctrl     *gomock.Controller
	recorder *MockRoundDBMockRecorder
	isgomock struct{}
}

// MockRoundDBMockRecorder is the mock recorder for MockRoundDB.
type MockRoundDBMockRecorder struct {
	mock *MockRoundDB
}

// NewMockRoundDB creates a new mock instance.
func NewMockRoundDB(ctrl *gomock.Controller) *MockRoundDB {
	mock := &MockRoundDB{ctrl: ctrl}
	mock.recorder = &MockRoundDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoundDB) EXPECT() *MockRoundDBMockRecorder {
	return m.recorder
}

// CreateRound mocks base method.
func (m *MockRoundDB) CreateRound(ctx context.Context, guildID sharedtypes.GuildID, round *roundtypes.Round) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRound", ctx, guildID, round)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRound indicates an expected call of CreateRound.
func (mr *MockRoundDBMockRecorder) CreateRound(ctx, guildID, round any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRound", reflect.TypeOf((*MockRoundDB)(nil).CreateRound), ctx, guildID, round)
}

// DeleteRound mocks base method.
func (m *MockRoundDB) DeleteRound(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRound", ctx, guildID, roundID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRound indicates an expected call of DeleteRound.
func (mr *MockRoundDBMockRecorder) DeleteRound(ctx, guildID, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRound", reflect.TypeOf((*MockRoundDB)(nil).DeleteRound), ctx, guildID, roundID)
}

// GetEventMessageID mocks base method.
func (m *MockRoundDB) GetEventMessageID(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventMessageID", ctx, guildID, roundID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventMessageID indicates an expected call of GetEventMessageID.
func (mr *MockRoundDBMockRecorder) GetEventMessageID(ctx, guildID, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventMessageID", reflect.TypeOf((*MockRoundDB)(nil).GetEventMessageID), ctx, guildID, roundID)
}

// GetParticipant mocks base method.
func (m *MockRoundDB) GetParticipant(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID, userID sharedtypes.DiscordID) (*roundtypes.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipant", ctx, guildID, roundID, userID)
	ret0, _ := ret[0].(*roundtypes.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipant indicates an expected call of GetParticipant.
func (mr *MockRoundDBMockRecorder) GetParticipant(ctx, guildID, roundID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipant", reflect.TypeOf((*MockRoundDB)(nil).GetParticipant), ctx, guildID, roundID, userID)
}

// GetParticipants mocks base method.
func (m *MockRoundDB) GetParticipants(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID) ([]roundtypes.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipants", ctx, guildID, roundID)
	ret0, _ := ret[0].([]roundtypes.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipants indicates an expected call of GetParticipants.
func (mr *MockRoundDBMockRecorder) GetParticipants(ctx, guildID, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipants", reflect.TypeOf((*MockRoundDB)(nil).GetParticipants), ctx, guildID, roundID)
}

// GetParticipantsWithResponses mocks base method.
func (m *MockRoundDB) GetParticipantsWithResponses(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID, responses ...string) ([]roundtypes.Participant, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, guildID, roundID}
	for _, a := range responses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetParticipantsWithResponses", varargs...)
	ret0, _ := ret[0].([]roundtypes.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipantsWithResponses indicates an expected call of GetParticipantsWithResponses.
func (mr *MockRoundDBMockRecorder) GetParticipantsWithResponses(ctx, guildID, roundID any, responses ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, guildID, roundID}, responses...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipantsWithResponses", reflect.TypeOf((*MockRoundDB)(nil).GetParticipantsWithResponses), varargs...)
}

// GetRound mocks base method.
func (m *MockRoundDB) GetRound(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID) (*roundtypes.Round, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRound", ctx, guildID, roundID)
	ret0, _ := ret[0].(*roundtypes.Round)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRound indicates an expected call of GetRound.
func (mr *MockRoundDBMockRecorder) GetRound(ctx, guildID, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRound", reflect.TypeOf((*MockRoundDB)(nil).GetRound), ctx, guildID, roundID)
}

// GetRoundState mocks base method.
func (m *MockRoundDB) GetRoundState(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID) (roundtypes.RoundState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoundState", ctx, guildID, roundID)
	ret0, _ := ret[0].(roundtypes.RoundState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoundState indicates an expected call of GetRoundState.
func (mr *MockRoundDBMockRecorder) GetRoundState(ctx, guildID, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoundState", reflect.TypeOf((*MockRoundDB)(nil).GetRoundState), ctx, guildID, roundID)
}

// GetUpcomingRounds mocks base method.
func (m *MockRoundDB) GetUpcomingRounds(ctx context.Context, guildID sharedtypes.GuildID) ([]*roundtypes.Round, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcomingRounds", ctx, guildID)
	ret0, _ := ret[0].([]*roundtypes.Round)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcomingRounds indicates an expected call of GetUpcomingRounds.
func (mr *MockRoundDBMockRecorder) GetUpcomingRounds(ctx, guildID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcomingRounds", reflect.TypeOf((*MockRoundDB)(nil).GetUpcomingRounds), ctx, guildID)
}

// LogRound mocks base method.
func (m *MockRoundDB) LogRound(ctx context.Context, guildID sharedtypes.GuildID, round *roundtypes.Round) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogRound", ctx, guildID, round)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogRound indicates an expected call of LogRound.
func (mr *MockRoundDBMockRecorder) LogRound(ctx, guildID, round any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogRound", reflect.TypeOf((*MockRoundDB)(nil).LogRound), ctx, guildID, round)
}

// RemoveParticipant mocks base method.
func (m *MockRoundDB) RemoveParticipant(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID, userID sharedtypes.DiscordID) ([]roundtypes.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveParticipant", ctx, guildID, roundID, userID)
	ret0, _ := ret[0].([]roundtypes.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveParticipant indicates an expected call of RemoveParticipant.
func (mr *MockRoundDBMockRecorder) RemoveParticipant(ctx, guildID, roundID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveParticipant", reflect.TypeOf((*MockRoundDB)(nil).RemoveParticipant), ctx, guildID, roundID, userID)
}

// TagUpdates mocks base method.
func (m *MockRoundDB) TagUpdates(ctx context.Context, guildID sharedtypes.GuildID, arg2 bun.IDB, round *roundtypes.Round) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagUpdates", ctx, guildID, arg2, round)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagUpdates indicates an expected call of TagUpdates.
func (mr *MockRoundDBMockRecorder) TagUpdates(ctx, guildID, arg2, round any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagUpdates", reflect.TypeOf((*MockRoundDB)(nil).TagUpdates), ctx, guildID, arg2, round)
}

// UpdateEventMessageID mocks base method.
func (m *MockRoundDB) UpdateEventMessageID(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID, eventMessageID string) (*roundtypes.Round, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventMessageID", ctx, guildID, roundID, eventMessageID)
	ret0, _ := ret[0].(*roundtypes.Round)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEventMessageID indicates an expected call of UpdateEventMessageID.
func (mr *MockRoundDBMockRecorder) UpdateEventMessageID(ctx, guildID, roundID, eventMessageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventMessageID", reflect.TypeOf((*MockRoundDB)(nil).UpdateEventMessageID), ctx, guildID, roundID, eventMessageID)
}

// UpdateParticipant mocks base method.
func (m *MockRoundDB) UpdateParticipant(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID, participant roundtypes.Participant) ([]roundtypes.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParticipant", ctx, guildID, roundID, participant)
	ret0, _ := ret[0].([]roundtypes.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateParticipant indicates an expected call of UpdateParticipant.
func (mr *MockRoundDBMockRecorder) UpdateParticipant(ctx, guildID, roundID, participant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParticipant", reflect.TypeOf((*MockRoundDB)(nil).UpdateParticipant), ctx, guildID, roundID, participant)
}

// UpdateParticipantScore mocks base method.
func (m *MockRoundDB) UpdateParticipantScore(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID, participantID sharedtypes.DiscordID, score sharedtypes.Score) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParticipantScore", ctx, guildID, roundID, participantID, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateParticipantScore indicates an expected call of UpdateParticipantScore.
func (mr *MockRoundDBMockRecorder) UpdateParticipantScore(ctx, guildID, roundID, participantID, score any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParticipantScore", reflect.TypeOf((*MockRoundDB)(nil).UpdateParticipantScore), ctx, guildID, roundID, participantID, score)
}

// UpdateRound mocks base method.
func (m *MockRoundDB) UpdateRound(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID, round *roundtypes.Round) (*roundtypes.Round, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRound", ctx, guildID, roundID, round)
	ret0, _ := ret[0].(*roundtypes.Round)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRound indicates an expected call of UpdateRound.
func (mr *MockRoundDBMockRecorder) UpdateRound(ctx, guildID, roundID, round any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRound", reflect.TypeOf((*MockRoundDB)(nil).UpdateRound), ctx, guildID, roundID, round)
}

// UpdateRoundState mocks base method.
func (m *MockRoundDB) UpdateRoundState(ctx context.Context, guildID sharedtypes.GuildID, roundID sharedtypes.RoundID, state roundtypes.RoundState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoundState", ctx, guildID, roundID, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoundState indicates an expected call of UpdateRoundState.
func (mr *MockRoundDBMockRecorder) UpdateRoundState(ctx, guildID, roundID, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoundState", reflect.TypeOf((*MockRoundDB)(nil).UpdateRoundState), ctx, guildID, roundID, state)
}

// UpdateRoundsAndParticipants mocks base method.
func (m *MockRoundDB) UpdateRoundsAndParticipants(ctx context.Context, guildID sharedtypes.GuildID, updates []roundtypes.RoundUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoundsAndParticipants", ctx, guildID, updates)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoundsAndParticipants indicates an expected call of UpdateRoundsAndParticipants.
func (mr *MockRoundDBMockRecorder) UpdateRoundsAndParticipants(ctx, guildID, updates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoundsAndParticipants", reflect.TypeOf((*MockRoundDB)(nil).UpdateRoundsAndParticipants), ctx, guildID, updates)
}

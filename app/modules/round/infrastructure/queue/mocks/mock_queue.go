// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/modules/round/infrastructure/queue/service.go
//
// Generated by this command:
//
//	mockgen -source=./app/modules/round/infrastructure/queue/service.go -destination=./app/modules/round/infrastructure/queue/mocks/mock_queue.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	roundevents "github.com/Black-And-White-Club/frolf-bot-shared/events/round"
	sharedtypes "github.com/Black-And-White-Club/frolf-bot-shared/types/shared"
	roundqueue "github.com/Black-And-White-Club/frolf-bot/app/modules/round/infrastructure/queue"
	gomock "go.uber.org/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
	isgomock struct{}
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// RecordOperationAttempt mocks base method.
func (m *MockMetrics) RecordOperationAttempt(ctx context.Context, operation, service string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationAttempt", ctx, operation, service)
}

// RecordOperationAttempt indicates an expected call of RecordOperationAttempt.
func (mr *MockMetricsMockRecorder) RecordOperationAttempt(ctx, operation, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationAttempt", reflect.TypeOf((*MockMetrics)(nil).RecordOperationAttempt), ctx, operation, service)
}

// RecordOperationDuration mocks base method.
func (m *MockMetrics) RecordOperationDuration(ctx context.Context, operation, service string, duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationDuration", ctx, operation, service, duration)
}

// RecordOperationDuration indicates an expected call of RecordOperationDuration.
func (mr *MockMetricsMockRecorder) RecordOperationDuration(ctx, operation, service, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationDuration", reflect.TypeOf((*MockMetrics)(nil).RecordOperationDuration), ctx, operation, service, duration)
}

// RecordOperationFailure mocks base method.
func (m *MockMetrics) RecordOperationFailure(ctx context.Context, operation, service string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationFailure", ctx, operation, service)
}

// RecordOperationFailure indicates an expected call of RecordOperationFailure.
func (mr *MockMetricsMockRecorder) RecordOperationFailure(ctx, operation, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationFailure", reflect.TypeOf((*MockMetrics)(nil).RecordOperationFailure), ctx, operation, service)
}

// RecordOperationSuccess mocks base method.
func (m *MockMetrics) RecordOperationSuccess(ctx context.Context, operation, service string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordOperationSuccess", ctx, operation, service)
}

// RecordOperationSuccess indicates an expected call of RecordOperationSuccess.
func (mr *MockMetricsMockRecorder) RecordOperationSuccess(ctx, operation, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordOperationSuccess", reflect.TypeOf((*MockMetrics)(nil).RecordOperationSuccess), ctx, operation, service)
}

// MockQueueService is a mock of QueueService interface.
type MockQueueService struct {
	ctrl     *gomock.Controller
	recorder *MockQueueServiceMockRecorder
	isgomock struct{}
}

// MockQueueServiceMockRecorder is the mock recorder for MockQueueService.
type MockQueueServiceMockRecorder struct {
	mock *MockQueueService
}

// NewMockQueueService creates a new mock instance.
func NewMockQueueService(ctrl *gomock.Controller) *MockQueueService {
	mock := &MockQueueService{ctrl: ctrl}
	mock.recorder = &MockQueueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueService) EXPECT() *MockQueueServiceMockRecorder {
	return m.recorder
}

// CancelRoundJobs mocks base method.
func (m *MockQueueService) CancelRoundJobs(ctx context.Context, roundID sharedtypes.RoundID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelRoundJobs", ctx, roundID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelRoundJobs indicates an expected call of CancelRoundJobs.
func (mr *MockQueueServiceMockRecorder) CancelRoundJobs(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRoundJobs", reflect.TypeOf((*MockQueueService)(nil).CancelRoundJobs), ctx, roundID)
}

// GetScheduledJobs mocks base method.
func (m *MockQueueService) GetScheduledJobs(ctx context.Context, roundID sharedtypes.RoundID) ([]roundqueue.JobInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledJobs", ctx, roundID)
	ret0, _ := ret[0].([]roundqueue.JobInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledJobs indicates an expected call of GetScheduledJobs.
func (mr *MockQueueServiceMockRecorder) GetScheduledJobs(ctx, roundID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledJobs", reflect.TypeOf((*MockQueueService)(nil).GetScheduledJobs), ctx, roundID)
}

// HealthCheck mocks base method.
func (m *MockQueueService) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockQueueServiceMockRecorder) HealthCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockQueueService)(nil).HealthCheck), ctx)
}

// ScheduleRoundReminder mocks base method.
func (m *MockQueueService) ScheduleRoundReminder(ctx context.Context, roundID sharedtypes.RoundID, reminderTime time.Time, payload roundevents.DiscordReminderPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleRoundReminder", ctx, roundID, reminderTime, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleRoundReminder indicates an expected call of ScheduleRoundReminder.
func (mr *MockQueueServiceMockRecorder) ScheduleRoundReminder(ctx, roundID, reminderTime, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleRoundReminder", reflect.TypeOf((*MockQueueService)(nil).ScheduleRoundReminder), ctx, roundID, reminderTime, payload)
}

// ScheduleRoundStart mocks base method.
func (m *MockQueueService) ScheduleRoundStart(ctx context.Context, roundID sharedtypes.RoundID, startTime time.Time, payload roundevents.RoundStartedPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleRoundStart", ctx, roundID, startTime, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleRoundStart indicates an expected call of ScheduleRoundStart.
func (mr *MockQueueServiceMockRecorder) ScheduleRoundStart(ctx, roundID, startTime, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleRoundStart", reflect.TypeOf((*MockQueueService)(nil).ScheduleRoundStart), ctx, roundID, startTime, payload)
}

// Start mocks base method.
func (m *MockQueueService) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockQueueServiceMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockQueueService)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockQueueService) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockQueueServiceMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockQueueService)(nil).Stop), ctx)
}

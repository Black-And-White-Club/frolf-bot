// Code generated by MockGen. DO NOT EDIT.
// Source: app/modules/round/infrastructure/subscribers/interface.go
//
// Generated by this command:
//
//	mockgen -source=app/modules/round/infrastructure/subscribers/interface.go -destination=app/modules/round/infrastructure/subscribers/mocks/mock_subscribers.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSubscribers is a mock of Subscribers interface.
type MockSubscribers struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribersMockRecorder
	isgomock struct{}
}

// MockSubscribersMockRecorder is the mock recorder for MockSubscribers.
type MockSubscribersMockRecorder struct {
	mock *MockSubscribers
}

// NewMockSubscribers creates a new mock instance.
func NewMockSubscribers(ctrl *gomock.Controller) *MockSubscribers {
	mock := &MockSubscribers{ctrl: ctrl}
	mock.recorder = &MockSubscribersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscribers) EXPECT() *MockSubscribersMockRecorder {
	return m.recorder
}

// SubscribeToParticipantManagementEvents mocks base method.
func (m *MockSubscribers) SubscribeToParticipantManagementEvents(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToParticipantManagementEvents", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToParticipantManagementEvents indicates an expected call of SubscribeToParticipantManagementEvents.
func (mr *MockSubscribersMockRecorder) SubscribeToParticipantManagementEvents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToParticipantManagementEvents", reflect.TypeOf((*MockSubscribers)(nil).SubscribeToParticipantManagementEvents), ctx)
}

// SubscribeToRoundFinalizationEvents mocks base method.
func (m *MockSubscribers) SubscribeToRoundFinalizationEvents(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToRoundFinalizationEvents", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToRoundFinalizationEvents indicates an expected call of SubscribeToRoundFinalizationEvents.
func (mr *MockSubscribersMockRecorder) SubscribeToRoundFinalizationEvents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToRoundFinalizationEvents", reflect.TypeOf((*MockSubscribers)(nil).SubscribeToRoundFinalizationEvents), ctx)
}

// SubscribeToRoundManagementEvents mocks base method.
func (m *MockSubscribers) SubscribeToRoundManagementEvents(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToRoundManagementEvents", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToRoundManagementEvents indicates an expected call of SubscribeToRoundManagementEvents.
func (mr *MockSubscribersMockRecorder) SubscribeToRoundManagementEvents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToRoundManagementEvents", reflect.TypeOf((*MockSubscribers)(nil).SubscribeToRoundManagementEvents), ctx)
}

// SubscribeToRoundStartedEvents mocks base method.
func (m *MockSubscribers) SubscribeToRoundStartedEvents(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToRoundStartedEvents", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToRoundStartedEvents indicates an expected call of SubscribeToRoundStartedEvents.
func (mr *MockSubscribersMockRecorder) SubscribeToRoundStartedEvents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToRoundStartedEvents", reflect.TypeOf((*MockSubscribers)(nil).SubscribeToRoundStartedEvents), ctx)
}

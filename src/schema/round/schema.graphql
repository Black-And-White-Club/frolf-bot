# Round-related types, queries, and mutations
extend type Query {
  getRounds(limit: Int, offset: Int): [Round!]!
  getRound(roundID: ID!): Round! # Query to get details of a specific round
}

extend type Mutation {
  scheduleRound(input: ScheduleRoundInput!): Round!
  joinRound(input: JoinRoundInput!): Round!
  submitScore(roundID: ID!, score: Int!, tagNumber: Int): Round! # Updated to include tag
  finalizeAndProcessScores(roundID: ID!): Round!
  editRound(roundID: ID!, input: EditRoundInput!): Round!
  deleteRound(roundID: ID!): Boolean!
  updateParticipantResponse(roundID: ID!, response: Response!): Round! # Update participant response
}

type Round {
  roundID: ID!
  title: String!
  location: String!
  eventType: String
  date: String!
  time: String!
  participants: [Participant!]!
  scores: [Score!]!
  finalized: Boolean!
  creatorID: String!
  state: RoundState!
}

input ScheduleRoundInput {
  title: String!
  location: String!
  eventType: String
  date: String!
  time: String!
  creatorID: String!
}

input EditRoundInput {
  title: String
  location: String
  eventType: String
  date: String
  time: String
}

input JoinRoundInput {
  roundID: ID!
  discordID: String!
  response: Response!
}

type Participant {
  discordID: String!
  response: Response!
  tagNumber: Int
}

enum RoundState {
  UPCOMING
  IN_PROGRESS
  FINALIZED
  DELETED
}

enum Response {
  ACCEPT
  TENTATIVE
  DECLINE
}

# Additional types for handling scores and logs
type Score {
  score: Int!
  tagNumber: Int # Added tag field to Score
}

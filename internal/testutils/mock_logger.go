// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/shared/logger.go
//
// Generated by this command:
//
//	mockgen -source=./app/shared/logger.go -destination=internal/testutils/mock_logger.go -package=testutils
//

// Package testutils is a generated GoMock package.
package testutils

import (
	reflect "reflect"

	shared "github.com/Black-And-White-Club/tcr-bot/app/shared"
	gomock "go.uber.org/mock/gomock"
)

// MockLoggerAdapter is a mock of LoggerAdapter interface.
type MockLoggerAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerAdapterMockRecorder
	isgomock struct{}
}

// MockLoggerAdapterMockRecorder is the mock recorder for MockLoggerAdapter.
type MockLoggerAdapterMockRecorder struct {
	mock *MockLoggerAdapter
}

// NewMockLoggerAdapter creates a new mock instance.
func NewMockLoggerAdapter(ctrl *gomock.Controller) *MockLoggerAdapter {
	mock := &MockLoggerAdapter{ctrl: ctrl}
	mock.recorder = &MockLoggerAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerAdapter) EXPECT() *MockLoggerAdapterMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLoggerAdapter) Debug(msg string, fields shared.LogFields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", msg, fields)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerAdapterMockRecorder) Debug(msg, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLoggerAdapter)(nil).Debug), msg, fields)
}

// Error mocks base method.
func (m *MockLoggerAdapter) Error(msg string, err error, fields shared.LogFields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", msg, err, fields)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerAdapterMockRecorder) Error(msg, err, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggerAdapter)(nil).Error), msg, err, fields)
}

// Info mocks base method.
func (m *MockLoggerAdapter) Info(msg string, fields shared.LogFields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", msg, fields)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerAdapterMockRecorder) Info(msg, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggerAdapter)(nil).Info), msg, fields)
}

// Trace mocks base method.
func (m *MockLoggerAdapter) Trace(msg string, fields shared.LogFields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Trace", msg, fields)
}

// Trace indicates an expected call of Trace.
func (mr *MockLoggerAdapterMockRecorder) Trace(msg, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockLoggerAdapter)(nil).Trace), msg, fields)
}

// With mocks base method.
func (m *MockLoggerAdapter) With(fields shared.LogFields) shared.LoggerAdapter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", fields)
	ret0, _ := ret[0].(shared.LoggerAdapter)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockLoggerAdapterMockRecorder) With(fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLoggerAdapter)(nil).With), fields)
}

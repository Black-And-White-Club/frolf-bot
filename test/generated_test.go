// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"context"
	"reflect"
	"testing"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/romero-jace/tcr-bot/graph/model"
	"github.com/vektah/gqlparser/v2/ast"
)

func TestNewExecutableSchema(t *testing.T) {
	type args struct {
		cfg Config
	}
	tests := []struct {
		name string
		args args
		want graphql.ExecutableSchema
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := NewExecutableSchema(tt.args.cfg); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewExecutableSchema() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executableSchema_Schema(t *testing.T) {
	tests := []struct {
		name string
		e    *executableSchema
		want *ast.Schema
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.e.Schema(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executableSchema.Schema() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executableSchema_Complexity(t *testing.T) {
	type args struct {
		typeName        string
		field           string
		childComplexity int
		rawArgs         map[string]interface{}
	}
	tests := []struct {
		name  string
		e     *executableSchema
		args  args
		want  int
		want1 bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, got1 := tt.e.Complexity(tt.args.typeName, tt.args.field, tt.args.childComplexity, tt.args.rawArgs)
			if got != tt.want {
				t.Errorf("executableSchema.Complexity() got = %v, want %v", got, tt.want)
			}
			if got1 != tt.want1 {
				t.Errorf("executableSchema.Complexity() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}

func Test_executableSchema_Exec(t *testing.T) {
	type args struct {
		ctx context.Context
	}
	tests := []struct {
		name string
		e    *executableSchema
		args args
		want graphql.ResponseHandler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.e.Exec(tt.args.ctx); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executableSchema.Exec() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_processDeferredGroup(t *testing.T) {
	type args struct {
		dg graphql.DeferredGroup
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.ec.processDeferredGroup(tt.args.dg)
		})
	}
}

func Test_executionContext_introspectSchema(t *testing.T) {
	tests := []struct {
		name    string
		ec      *executionContext
		want    *introspection.Schema
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.introspectSchema()
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.introspectSchema() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.introspectSchema() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_introspectType(t *testing.T) {
	type args struct {
		name string
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    *introspection.Type
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.introspectType(tt.args.name)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.introspectType() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.introspectType() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_createUser_args(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    map[string]interface{}
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_createUser_args(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_createUser_args() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Mutation_createUser_args() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_createUser_argsInput(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    model.UserInput
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_createUser_argsInput(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_createUser_argsInput() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Mutation_createUser_argsInput() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_deleteRound_args(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    map[string]interface{}
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_deleteRound_args(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_deleteRound_args() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Mutation_deleteRound_args() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_deleteRound_argsRoundID(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_deleteRound_argsRoundID(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_deleteRound_argsRoundID() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.field_Mutation_deleteRound_argsRoundID() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_editRound_args(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    map[string]interface{}
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_editRound_args(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_editRound_args() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Mutation_editRound_args() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_editRound_argsRoundID(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_editRound_argsRoundID(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_editRound_argsRoundID() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.field_Mutation_editRound_argsRoundID() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_editRound_argsInput(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    model.RoundInput
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_editRound_argsInput(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_editRound_argsInput() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Mutation_editRound_argsInput() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_finalizeRound_args(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    map[string]interface{}
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_finalizeRound_args(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_finalizeRound_args() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Mutation_finalizeRound_args() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_finalizeRound_argsRoundID(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_finalizeRound_argsRoundID(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_finalizeRound_argsRoundID() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.field_Mutation_finalizeRound_argsRoundID() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_joinRound_args(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    map[string]interface{}
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_joinRound_args(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_joinRound_args() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Mutation_joinRound_args() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_joinRound_argsInput(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    model.JoinRoundInput
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_joinRound_argsInput(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_joinRound_argsInput() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Mutation_joinRound_argsInput() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_scheduleRound_args(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    map[string]interface{}
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_scheduleRound_args(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_scheduleRound_args() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Mutation_scheduleRound_args() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_scheduleRound_argsInput(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    model.RoundInput
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_scheduleRound_argsInput(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_scheduleRound_argsInput() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Mutation_scheduleRound_argsInput() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_submitScore_args(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    map[string]interface{}
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_submitScore_args(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_submitScore_args() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Mutation_submitScore_args() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_submitScore_argsRoundID(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_submitScore_argsRoundID(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_submitScore_argsRoundID() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.field_Mutation_submitScore_argsRoundID() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_submitScore_argsUserID(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_submitScore_argsUserID(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_submitScore_argsUserID() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.field_Mutation_submitScore_argsUserID() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Mutation_submitScore_argsScore(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    int
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Mutation_submitScore_argsScore(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Mutation_submitScore_argsScore() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.field_Mutation_submitScore_argsScore() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Query___type_args(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    map[string]interface{}
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Query___type_args(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Query___type_args() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Query___type_args() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Query___type_argsName(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Query___type_argsName(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Query___type_argsName() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.field_Query___type_argsName() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Query_getRounds_args(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    map[string]interface{}
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Query_getRounds_args(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Query_getRounds_args() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Query_getRounds_args() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Query_getRounds_argsLimit(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    *int
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Query_getRounds_argsLimit(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Query_getRounds_argsLimit() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Query_getRounds_argsLimit() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Query_getRounds_argsOffset(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    *int
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Query_getRounds_argsOffset(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Query_getRounds_argsOffset() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Query_getRounds_argsOffset() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Query_getUserScore_args(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    map[string]interface{}
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Query_getUserScore_args(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Query_getUserScore_args() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Query_getUserScore_args() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Query_getUserScore_argsUserID(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Query_getUserScore_argsUserID(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Query_getUserScore_argsUserID() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.field_Query_getUserScore_argsUserID() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Query_getUser_args(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    map[string]interface{}
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Query_getUser_args(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Query_getUser_args() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field_Query_getUser_args() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field_Query_getUser_argsDiscordID(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field_Query_getUser_argsDiscordID(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field_Query_getUser_argsDiscordID() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.field_Query_getUser_argsDiscordID() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field___Type_enumValues_args(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    map[string]interface{}
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field___Type_enumValues_args(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field___Type_enumValues_args() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field___Type_enumValues_args() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field___Type_enumValues_argsIncludeDeprecated(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    bool
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field___Type_enumValues_argsIncludeDeprecated(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field___Type_enumValues_argsIncludeDeprecated() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.field___Type_enumValues_argsIncludeDeprecated() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field___Type_fields_args(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    map[string]interface{}
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field___Type_fields_args(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field___Type_fields_args() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.field___Type_fields_args() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_field___Type_fields_argsIncludeDeprecated(t *testing.T) {
	type args struct {
		ctx     context.Context
		rawArgs map[string]interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    bool
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.field___Type_fields_argsIncludeDeprecated(tt.args.ctx, tt.args.rawArgs)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.field___Type_fields_argsIncludeDeprecated() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.field___Type_fields_argsIncludeDeprecated() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext__EditLog_editorID(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.EditLog
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._EditLog_editorID(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._EditLog_editorID() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_EditLog_editorID(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_EditLog_editorID(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_EditLog_editorID() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_EditLog_editorID() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__EditLog_timestamp(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.EditLog
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._EditLog_timestamp(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._EditLog_timestamp() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_EditLog_timestamp(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_EditLog_timestamp(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_EditLog_timestamp() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_EditLog_timestamp() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__EditLog_changes(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.EditLog
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._EditLog_changes(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._EditLog_changes() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_EditLog_changes(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_EditLog_changes(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_EditLog_changes() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_EditLog_changes() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Leaderboard_users(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Leaderboard
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Leaderboard_users(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Leaderboard_users() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Leaderboard_users(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Leaderboard_users(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Leaderboard_users() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Leaderboard_users() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Leaderboard_placements(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Leaderboard
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Leaderboard_placements(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Leaderboard_placements() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Leaderboard_placements(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Leaderboard_placements(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Leaderboard_placements() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Leaderboard_placements() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Location_id(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Location
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Location_id(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Location_id() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Location_id(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Location_id(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Location_id() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Location_id() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Location_course(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Location
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Location_course(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Location_course() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Location_course(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Location_course(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Location_course() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Location_course() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Location_address(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Location
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Location_address(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Location_address() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Location_address(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Location_address(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Location_address() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Location_address() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Location_city(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Location
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Location_city(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Location_city() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Location_city(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Location_city(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Location_city() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Location_city() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Mutation_createUser(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Mutation_createUser(tt.args.ctx, tt.args.field); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Mutation_createUser() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Mutation_createUser(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Mutation_createUser(tt.args.ctx, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Mutation_createUser() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Mutation_createUser() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Mutation_scheduleRound(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Mutation_scheduleRound(tt.args.ctx, tt.args.field); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Mutation_scheduleRound() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Mutation_scheduleRound(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Mutation_scheduleRound(tt.args.ctx, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Mutation_scheduleRound() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Mutation_scheduleRound() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Mutation_joinRound(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Mutation_joinRound(tt.args.ctx, tt.args.field); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Mutation_joinRound() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Mutation_joinRound(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Mutation_joinRound(tt.args.ctx, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Mutation_joinRound() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Mutation_joinRound() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Mutation_submitScore(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Mutation_submitScore(tt.args.ctx, tt.args.field); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Mutation_submitScore() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Mutation_submitScore(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Mutation_submitScore(tt.args.ctx, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Mutation_submitScore() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Mutation_submitScore() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Mutation_finalizeRound(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Mutation_finalizeRound(tt.args.ctx, tt.args.field); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Mutation_finalizeRound() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Mutation_finalizeRound(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Mutation_finalizeRound(tt.args.ctx, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Mutation_finalizeRound() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Mutation_finalizeRound() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Mutation_editRound(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Mutation_editRound(tt.args.ctx, tt.args.field); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Mutation_editRound() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Mutation_editRound(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Mutation_editRound(tt.args.ctx, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Mutation_editRound() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Mutation_editRound() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Mutation_deleteRound(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Mutation_deleteRound(tt.args.ctx, tt.args.field); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Mutation_deleteRound() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Mutation_deleteRound(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Mutation_deleteRound(tt.args.ctx, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Mutation_deleteRound() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Mutation_deleteRound() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Participant_user(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Participant
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Participant_user(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Participant_user() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Participant_user(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Participant_user(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Participant_user() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Participant_user() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Participant_response(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Participant
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Participant_response(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Participant_response() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Participant_response(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Participant_response(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Participant_response() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Participant_response() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Participant_rank(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Participant
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Participant_rank(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Participant_rank() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Participant_rank(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Participant_rank(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Participant_rank() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Participant_rank() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Query_getUser(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Query_getUser(tt.args.ctx, tt.args.field); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Query_getUser() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Query_getUser(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Query_getUser(tt.args.ctx, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Query_getUser() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Query_getUser() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Query_getLeaderboard(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Query_getLeaderboard(tt.args.ctx, tt.args.field); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Query_getLeaderboard() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Query_getLeaderboard(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Query_getLeaderboard(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Query_getLeaderboard() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Query_getLeaderboard() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Query_getRounds(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Query_getRounds(tt.args.ctx, tt.args.field); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Query_getRounds() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Query_getRounds(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Query_getRounds(tt.args.ctx, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Query_getRounds() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Query_getRounds() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Query_getUserScore(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Query_getUserScore(tt.args.ctx, tt.args.field); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Query_getUserScore() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Query_getUserScore(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Query_getUserScore(tt.args.ctx, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Query_getUserScore() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Query_getUserScore() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Query___type(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Query___type(tt.args.ctx, tt.args.field); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Query___type() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Query___type(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Query___type(tt.args.ctx, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Query___type() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Query___type() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Query___schema(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Query___schema(tt.args.ctx, tt.args.field); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Query___schema() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Query___schema(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Query___schema(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Query___schema() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Query___schema() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Round_id(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Round
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Round_id(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Round_id() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Round_id(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Round_id(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Round_id() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Round_id() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Round_title(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Round
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Round_title(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Round_title() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Round_title(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Round_title(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Round_title() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Round_title() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Round_location(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Round
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Round_location(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Round_location() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Round_location(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Round_location(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Round_location() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Round_location() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Round_eventType(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Round
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Round_eventType(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Round_eventType() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Round_eventType(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Round_eventType(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Round_eventType() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Round_eventType() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Round_date(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Round
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Round_date(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Round_date() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Round_date(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Round_date(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Round_date() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Round_date() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Round_time(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Round
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Round_time(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Round_time() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Round_time(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Round_time(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Round_time() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Round_time() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Round_participants(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Round
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Round_participants(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Round_participants() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Round_participants(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Round_participants(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Round_participants() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Round_participants() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Round_scores(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Round
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Round_scores(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Round_scores() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Round_scores(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Round_scores(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Round_scores() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Round_scores() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Round_finalized(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Round
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Round_finalized(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Round_finalized() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Round_finalized(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Round_finalized(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Round_finalized() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Round_finalized() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Round_editHistory(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Round
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Round_editHistory(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Round_editHistory() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Round_editHistory(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Round_editHistory(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Round_editHistory() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Round_editHistory() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Round_creatorID(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Round
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Round_creatorID(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Round_creatorID() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Round_creatorID(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Round_creatorID(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Round_creatorID() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Round_creatorID() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Score_userID(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Score
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Score_userID(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Score_userID() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Score_userID(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Score_userID(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Score_userID() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Score_userID() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Score_score(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Score
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Score_score(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Score_score() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Score_score(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Score_score(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Score_score() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Score_score() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Tag_id(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Tag
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Tag_id(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Tag_id() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Tag_id(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Tag_id(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Tag_id() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Tag_id() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Tag_tagNumber(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Tag
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Tag_tagNumber(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Tag_tagNumber() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Tag_tagNumber(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Tag_tagNumber(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Tag_tagNumber() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Tag_tagNumber() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Tag_lastPlayed(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Tag
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Tag_lastPlayed(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Tag_lastPlayed() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Tag_lastPlayed(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Tag_lastPlayed(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Tag_lastPlayed() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Tag_lastPlayed() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Tag_durationHeld(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Tag
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Tag_durationHeld(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Tag_durationHeld() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Tag_durationHeld(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Tag_durationHeld(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Tag_durationHeld() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Tag_durationHeld() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Tag_name(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Tag
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Tag_name(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Tag_name() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Tag_name(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Tag_name(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Tag_name() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Tag_name() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__Tag_position(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.Tag
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._Tag_position(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._Tag_position() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_Tag_position(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_Tag_position(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_Tag_position() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_Tag_position() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__User_id(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.User
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._User_id(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._User_id() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_User_id(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_User_id(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_User_id() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_User_id() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__User_name(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.User
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._User_name(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._User_name() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_User_name(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_User_name(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_User_name() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_User_name() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__User_discordID(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.User
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._User_discordID(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._User_discordID() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_User_discordID(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_User_discordID(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_User_discordID() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_User_discordID() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__User_tagNumber(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.User
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._User_tagNumber(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._User_tagNumber() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_User_tagNumber(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_User_tagNumber(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_User_tagNumber() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_User_tagNumber() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__User_rounds(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.User
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._User_rounds(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._User_rounds() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_User_rounds(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_User_rounds(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_User_rounds() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_User_rounds() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext__User_role(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *model.User
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec._User_role(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext._User_role() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext_User_role(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext_User_role(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext_User_role() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext_User_role() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Directive_name(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Directive
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Directive_name(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Directive_name() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Directive_name(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Directive_name(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Directive_name() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Directive_name() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Directive_description(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Directive
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Directive_description(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Directive_description() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Directive_description(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Directive_description(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Directive_description() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Directive_description() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Directive_locations(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Directive
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Directive_locations(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Directive_locations() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Directive_locations(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Directive_locations(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Directive_locations() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Directive_locations() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Directive_args(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Directive
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Directive_args(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Directive_args() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Directive_args(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Directive_args(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Directive_args() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Directive_args() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Directive_isRepeatable(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Directive
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Directive_isRepeatable(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Directive_isRepeatable() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Directive_isRepeatable(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Directive_isRepeatable(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Directive_isRepeatable() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Directive_isRepeatable() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____EnumValue_name(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.EnumValue
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___EnumValue_name(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___EnumValue_name() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___EnumValue_name(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___EnumValue_name(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___EnumValue_name() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___EnumValue_name() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____EnumValue_description(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.EnumValue
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___EnumValue_description(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___EnumValue_description() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___EnumValue_description(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___EnumValue_description(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___EnumValue_description() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___EnumValue_description() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____EnumValue_isDeprecated(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.EnumValue
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___EnumValue_isDeprecated(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___EnumValue_isDeprecated() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___EnumValue_isDeprecated(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___EnumValue_isDeprecated(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___EnumValue_isDeprecated() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___EnumValue_isDeprecated() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____EnumValue_deprecationReason(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.EnumValue
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___EnumValue_deprecationReason(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___EnumValue_deprecationReason() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___EnumValue_deprecationReason(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___EnumValue_deprecationReason(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___EnumValue_deprecationReason() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___EnumValue_deprecationReason() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Field_name(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Field
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Field_name(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Field_name() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Field_name(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Field_name(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Field_name() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Field_name() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Field_description(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Field
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Field_description(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Field_description() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Field_description(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Field_description(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Field_description() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Field_description() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Field_args(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Field
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Field_args(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Field_args() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Field_args(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Field_args(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Field_args() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Field_args() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Field_type(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Field
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Field_type(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Field_type() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Field_type(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Field_type(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Field_type() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Field_type() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Field_isDeprecated(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Field
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Field_isDeprecated(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Field_isDeprecated() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Field_isDeprecated(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Field_isDeprecated(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Field_isDeprecated() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Field_isDeprecated() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Field_deprecationReason(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Field
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Field_deprecationReason(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Field_deprecationReason() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Field_deprecationReason(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Field_deprecationReason(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Field_deprecationReason() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Field_deprecationReason() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____InputValue_name(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.InputValue
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___InputValue_name(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___InputValue_name() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___InputValue_name(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___InputValue_name(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___InputValue_name() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___InputValue_name() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____InputValue_description(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.InputValue
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___InputValue_description(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___InputValue_description() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___InputValue_description(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___InputValue_description(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___InputValue_description() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___InputValue_description() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____InputValue_type(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.InputValue
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___InputValue_type(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___InputValue_type() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___InputValue_type(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___InputValue_type(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___InputValue_type() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___InputValue_type() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____InputValue_defaultValue(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.InputValue
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___InputValue_defaultValue(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___InputValue_defaultValue() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___InputValue_defaultValue(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___InputValue_defaultValue(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___InputValue_defaultValue() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___InputValue_defaultValue() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Schema_description(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Schema
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Schema_description(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Schema_description() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Schema_description(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Schema_description(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Schema_description() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Schema_description() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Schema_types(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Schema
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Schema_types(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Schema_types() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Schema_types(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Schema_types(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Schema_types() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Schema_types() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Schema_queryType(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Schema
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Schema_queryType(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Schema_queryType() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Schema_queryType(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Schema_queryType(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Schema_queryType() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Schema_queryType() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Schema_mutationType(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Schema
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Schema_mutationType(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Schema_mutationType() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Schema_mutationType(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Schema_mutationType(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Schema_mutationType() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Schema_mutationType() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Schema_subscriptionType(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Schema
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Schema_subscriptionType(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Schema_subscriptionType() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Schema_subscriptionType(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Schema_subscriptionType(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Schema_subscriptionType() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Schema_subscriptionType() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Schema_directives(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Schema
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Schema_directives(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Schema_directives() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Schema_directives(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Schema_directives(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Schema_directives() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Schema_directives() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Type_kind(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Type
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Type_kind(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Type_kind() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Type_kind(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Type_kind(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Type_kind() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Type_kind() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Type_name(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Type
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Type_name(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Type_name() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Type_name(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Type_name(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Type_name() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Type_name() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Type_description(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Type
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Type_description(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Type_description() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Type_description(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Type_description(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Type_description() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Type_description() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Type_fields(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Type
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Type_fields(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Type_fields() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Type_fields(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Type_fields(tt.args.ctx, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Type_fields() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Type_fields() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Type_interfaces(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Type
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Type_interfaces(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Type_interfaces() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Type_interfaces(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Type_interfaces(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Type_interfaces() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Type_interfaces() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Type_possibleTypes(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Type
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Type_possibleTypes(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Type_possibleTypes() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Type_possibleTypes(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Type_possibleTypes(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Type_possibleTypes() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Type_possibleTypes() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Type_enumValues(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Type
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Type_enumValues(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Type_enumValues() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Type_enumValues(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Type_enumValues(tt.args.ctx, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Type_enumValues() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Type_enumValues() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Type_inputFields(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Type
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Type_inputFields(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Type_inputFields() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Type_inputFields(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Type_inputFields(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Type_inputFields() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Type_inputFields() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Type_ofType(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Type
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Type_ofType(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Type_ofType() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Type_ofType(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Type_ofType(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Type_ofType() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Type_ofType() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext____Type_specifiedByURL(t *testing.T) {
	type args struct {
		ctx   context.Context
		field graphql.CollectedField
		obj   *introspection.Type
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantRet graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotRet := tt.ec.___Type_specifiedByURL(tt.args.ctx, tt.args.field, tt.args.obj); !reflect.DeepEqual(gotRet, tt.wantRet) {
				t.Errorf("executionContext.___Type_specifiedByURL() = %v, want %v", gotRet, tt.wantRet)
			}
		})
	}
}

func Test_executionContext_fieldContext___Type_specifiedByURL(t *testing.T) {
	type args struct {
		in0   context.Context
		field graphql.CollectedField
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		wantFc  *graphql.FieldContext
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotFc, err := tt.ec.fieldContext___Type_specifiedByURL(tt.args.in0, tt.args.field)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.fieldContext___Type_specifiedByURL() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotFc, tt.wantFc) {
				t.Errorf("executionContext.fieldContext___Type_specifiedByURL() = %v, want %v", gotFc, tt.wantFc)
			}
		})
	}
}

func Test_executionContext_unmarshalInputJoinRoundInput(t *testing.T) {
	type args struct {
		ctx context.Context
		obj interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    model.JoinRoundInput
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalInputJoinRoundInput(tt.args.ctx, tt.args.obj)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalInputJoinRoundInput() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.unmarshalInputJoinRoundInput() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalInputRoundInput(t *testing.T) {
	type args struct {
		ctx context.Context
		obj interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    model.RoundInput
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalInputRoundInput(tt.args.ctx, tt.args.obj)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalInputRoundInput() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.unmarshalInputRoundInput() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalInputUserInput(t *testing.T) {
	type args struct {
		ctx context.Context
		obj interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    model.UserInput
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalInputUserInput(tt.args.ctx, tt.args.obj)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalInputUserInput() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.unmarshalInputUserInput() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext__EditLog(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		obj *model.EditLog
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec._EditLog(tt.args.ctx, tt.args.sel, tt.args.obj); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext._EditLog() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext__Leaderboard(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		obj *model.Leaderboard
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec._Leaderboard(tt.args.ctx, tt.args.sel, tt.args.obj); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext._Leaderboard() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext__Location(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		obj *model.Location
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec._Location(tt.args.ctx, tt.args.sel, tt.args.obj); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext._Location() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext__Mutation(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec._Mutation(tt.args.ctx, tt.args.sel); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext._Mutation() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext__Participant(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		obj *model.Participant
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec._Participant(tt.args.ctx, tt.args.sel, tt.args.obj); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext._Participant() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext__Query(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec._Query(tt.args.ctx, tt.args.sel); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext._Query() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext__Round(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		obj *model.Round
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec._Round(tt.args.ctx, tt.args.sel, tt.args.obj); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext._Round() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext__Score(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		obj *model.Score
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec._Score(tt.args.ctx, tt.args.sel, tt.args.obj); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext._Score() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext__Tag(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		obj *model.Tag
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec._Tag(tt.args.ctx, tt.args.sel, tt.args.obj); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext._Tag() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext__User(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		obj *model.User
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec._User(tt.args.ctx, tt.args.sel, tt.args.obj); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext._User() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext____Directive(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		obj *introspection.Directive
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.___Directive(tt.args.ctx, tt.args.sel, tt.args.obj); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.___Directive() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext____EnumValue(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		obj *introspection.EnumValue
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.___EnumValue(tt.args.ctx, tt.args.sel, tt.args.obj); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.___EnumValue() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext____Field(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		obj *introspection.Field
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.___Field(tt.args.ctx, tt.args.sel, tt.args.obj); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.___Field() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext____InputValue(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		obj *introspection.InputValue
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.___InputValue(tt.args.ctx, tt.args.sel, tt.args.obj); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.___InputValue() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext____Schema(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		obj *introspection.Schema
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.___Schema(tt.args.ctx, tt.args.sel, tt.args.obj); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.___Schema() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext____Type(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		obj *introspection.Type
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.___Type(tt.args.ctx, tt.args.sel, tt.args.obj); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.___Type() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalNBoolean2bool(t *testing.T) {
	type args struct {
		ctx context.Context
		v   interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    bool
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalNBoolean2bool(tt.args.ctx, tt.args.v)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalNBoolean2bool() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.unmarshalNBoolean2bool() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNBoolean2bool(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   bool
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNBoolean2bool(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNBoolean2bool() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNEditLog2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐEditLogᚄ(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   []*model.EditLog
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNEditLog2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐEditLogᚄ(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNEditLog2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐEditLogᚄ() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNEditLog2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐEditLog(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   *model.EditLog
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNEditLog2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐEditLog(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNEditLog2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐEditLog() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalNID2string(t *testing.T) {
	type args struct {
		ctx context.Context
		v   interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalNID2string(tt.args.ctx, tt.args.v)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalNID2string() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.unmarshalNID2string() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNID2string(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   string
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNID2string(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNID2string() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalNInt2int(t *testing.T) {
	type args struct {
		ctx context.Context
		v   interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    int
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalNInt2int(tt.args.ctx, tt.args.v)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalNInt2int() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.unmarshalNInt2int() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNInt2int(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   int
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNInt2int(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNInt2int() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalNJoinRoundInput2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐJoinRoundInput(t *testing.T) {
	type args struct {
		ctx context.Context
		v   interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    model.JoinRoundInput
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalNJoinRoundInput2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐJoinRoundInput(tt.args.ctx, tt.args.v)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalNJoinRoundInput2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐJoinRoundInput() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.unmarshalNJoinRoundInput2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐJoinRoundInput() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNParticipant2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐParticipantᚄ(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   []*model.Participant
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNParticipant2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐParticipantᚄ(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNParticipant2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐParticipantᚄ() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNParticipant2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐParticipant(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   *model.Participant
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNParticipant2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐParticipant(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNParticipant2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐParticipant() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalNResponse2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐResponse(t *testing.T) {
	type args struct {
		ctx context.Context
		v   interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    model.Response
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalNResponse2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐResponse(tt.args.ctx, tt.args.v)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalNResponse2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐResponse() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.unmarshalNResponse2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐResponse() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNResponse2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐResponse(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   model.Response
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNResponse2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐResponse(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNResponse2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐResponse() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNRound2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐRound(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   model.Round
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNRound2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐRound(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNRound2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐRound() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNRound2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐRoundᚄ(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   []*model.Round
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNRound2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐRoundᚄ(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNRound2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐRoundᚄ() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNRound2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐRound(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   *model.Round
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNRound2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐRound(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNRound2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐRound() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalNRoundInput2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐRoundInput(t *testing.T) {
	type args struct {
		ctx context.Context
		v   interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    model.RoundInput
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalNRoundInput2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐRoundInput(tt.args.ctx, tt.args.v)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalNRoundInput2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐRoundInput() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.unmarshalNRoundInput2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐRoundInput() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNScore2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐScoreᚄ(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   []*model.Score
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNScore2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐScoreᚄ(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNScore2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐScoreᚄ() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNScore2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐScore(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   *model.Score
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNScore2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐScore(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNScore2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐScore() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalNString2string(t *testing.T) {
	type args struct {
		ctx context.Context
		v   interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalNString2string(tt.args.ctx, tt.args.v)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalNString2string() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.unmarshalNString2string() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNString2string(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   string
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNString2string(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNString2string() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNTag2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐTagᚄ(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   []*model.Tag
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNTag2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐTagᚄ(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNTag2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐTagᚄ() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNTag2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐTag(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   *model.Tag
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNTag2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐTag(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNTag2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐTag() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNUser2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐUser(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   model.User
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNUser2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐUser(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNUser2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐUser() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNUser2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐUserᚄ(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   []*model.User
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNUser2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐUserᚄ(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNUser2ᚕᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐUserᚄ() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalNUser2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐUser(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   *model.User
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalNUser2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐUser(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalNUser2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐUser() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalNUserInput2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐUserInput(t *testing.T) {
	type args struct {
		ctx context.Context
		v   interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    model.UserInput
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalNUserInput2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐUserInput(tt.args.ctx, tt.args.v)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalNUserInput2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐUserInput() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.unmarshalNUserInput2githubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐUserInput() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   introspection.Directive
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   []introspection.Directive
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalN__DirectiveLocation2string(t *testing.T) {
	type args struct {
		ctx context.Context
		v   interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalN__DirectiveLocation2string(tt.args.ctx, tt.args.v)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalN__DirectiveLocation2string() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.unmarshalN__DirectiveLocation2string() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalN__DirectiveLocation2string(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   string
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalN__DirectiveLocation2string(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalN__DirectiveLocation2string() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalN__DirectiveLocation2ᚕstringᚄ(t *testing.T) {
	type args struct {
		ctx context.Context
		v   interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    []string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalN__DirectiveLocation2ᚕstringᚄ(tt.args.ctx, tt.args.v)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalN__DirectiveLocation2ᚕstringᚄ() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.unmarshalN__DirectiveLocation2ᚕstringᚄ() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalN__DirectiveLocation2ᚕstringᚄ(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   []string
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalN__DirectiveLocation2ᚕstringᚄ(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalN__DirectiveLocation2ᚕstringᚄ() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   introspection.EnumValue
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   introspection.Field
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   introspection.InputValue
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   []introspection.InputValue
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   introspection.Type
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   []introspection.Type
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   *introspection.Type
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalN__TypeKind2string(t *testing.T) {
	type args struct {
		ctx context.Context
		v   interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalN__TypeKind2string(tt.args.ctx, tt.args.v)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalN__TypeKind2string() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.unmarshalN__TypeKind2string() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalN__TypeKind2string(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   string
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalN__TypeKind2string(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalN__TypeKind2string() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalOBoolean2bool(t *testing.T) {
	type args struct {
		ctx context.Context
		v   interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    bool
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalOBoolean2bool(tt.args.ctx, tt.args.v)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalOBoolean2bool() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("executionContext.unmarshalOBoolean2bool() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalOBoolean2bool(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   bool
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalOBoolean2bool(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalOBoolean2bool() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalOBoolean2ᚖbool(t *testing.T) {
	type args struct {
		ctx context.Context
		v   interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    *bool
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalOBoolean2ᚖbool(tt.args.ctx, tt.args.v)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalOBoolean2ᚖbool() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.unmarshalOBoolean2ᚖbool() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalOBoolean2ᚖbool(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   *bool
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalOBoolean2ᚖbool(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalOBoolean2ᚖbool() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalOInt2ᚖint(t *testing.T) {
	type args struct {
		ctx context.Context
		v   interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    *int
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalOInt2ᚖint(tt.args.ctx, tt.args.v)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalOInt2ᚖint() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.unmarshalOInt2ᚖint() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalOInt2ᚖint(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   *int
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalOInt2ᚖint(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalOInt2ᚖint() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalOLeaderboard2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐLeaderboard(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   *model.Leaderboard
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalOLeaderboard2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐLeaderboard(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalOLeaderboard2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐLeaderboard() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_unmarshalOString2ᚖstring(t *testing.T) {
	type args struct {
		ctx context.Context
		v   interface{}
	}
	tests := []struct {
		name    string
		ec      *executionContext
		args    args
		want    *string
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.ec.unmarshalOString2ᚖstring(tt.args.ctx, tt.args.v)
			if (err != nil) != tt.wantErr {
				t.Errorf("executionContext.unmarshalOString2ᚖstring() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.unmarshalOString2ᚖstring() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalOString2ᚖstring(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   *string
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalOString2ᚖstring(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalOString2ᚖstring() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalOUser2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐUser(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   *model.User
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalOUser2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐUser(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalOUser2ᚖgithubᚗcomᚋromeroᚑjaceᚋtcrᚑbotᚋgraphᚋmodelᚐUser() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   []introspection.EnumValue
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   []introspection.Field
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   []introspection.InputValue
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   *introspection.Schema
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   []introspection.Type
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_executionContext_marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(t *testing.T) {
	type args struct {
		ctx context.Context
		sel ast.SelectionSet
		v   *introspection.Type
	}
	tests := []struct {
		name string
		ec   *executionContext
		args args
		want graphql.Marshaler
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(tt.args.ctx, tt.args.sel, tt.args.v); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("executionContext.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType() = %v, want %v", got, tt.want)
			}
		})
	}
}

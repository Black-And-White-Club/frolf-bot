package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"

	"github.com/romero-jace/leaderboard/graph/model"
	service "github.com/romero-jace/tcr-bot/graph/services"
)

type Resolver struct {
	UserService  *services.UserService
	RoundService *services.RoundService // Add RoundService here
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	user, err := service.CreateUser(ctx, input)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// ScheduleRound is the resolver for the scheduleRound field.
func (r *mutationResolver) ScheduleRound(ctx context.Context, input model.RoundInput) (*model.Round, error) {
	round, err := r.RoundService.ScheduleRound(ctx, input)
	if err != nil {
		return nil, err
	}
	return round, nil
}

// JoinRound is the resolver for the joinRound field.
func (r *mutationResolver) JoinRound(ctx context.Context, roundID string, userID string) (*model.Round, error) {
	round, err := r.RoundService.JoinRound(ctx, roundID, userID)
	if err != nil {
		return nil, err
	}
	return round, nil
}

// SubmitScore is the resolver for the submitScore field.
func (r *mutationResolver) SubmitScore(ctx context.Context, roundID string, userID string, score int) (*model.Round, error) {
	round, err := r.RoundService.SubmitScore(ctx, roundID, userID, score)
	if err != nil {
		return nil, err
	}
	return round, nil
}

// FinalizeRound is the resolver for the finalizeRound field.
func (r *mutationResolver) FinalizeRound(ctx context.Context, roundID string) (*model.Round, error) {
	round, err := r.RoundService.FinalizeRound(ctx, roundID)
	if err != nil {
		return nil, err
	}
	return round, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	user, err := service.GetUser(ctx, id)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// GetLeaderboard is the resolver for the getLeaderboard field.
func (r *queryResolver) GetLeaderboard(ctx context.Context) (*model.Leaderboard, error) {
	leaderboard, err := r.LeaderboardService.GetLeaderboard(ctx)
	if err != nil {
		return nil, err
	}
	return leaderboard, nil
}

// GetRounds is the resolver for the getRounds field.
func (r *queryResolver) GetRounds(ctx context.Context, limit *int, offset *int) ([]*model.Round, error) {
	rounds, err := r.RoundService.GetRounds(ctx, limit, offset)
	if err != nil {
		return nil, err
	}
	return rounds, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

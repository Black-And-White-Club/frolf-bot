// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// Represents a log entry for edits made to a round.
type EditLog struct {
	EditorID  string `json:"editorID"`
	Timestamp string `json:"timestamp"`
	Changes   string `json:"changes"`
}

// Represents the leaderboard of users and their placements.
type Leaderboard struct {
	Users      []*User `json:"users"`
	Placements []*Tag  `json:"placements"`
}

// Represents a location for a round.
type Location struct {
	ID      string  `json:"id"`
	Course  string  `json:"course"`
	Address *string `json:"address,omitempty"`
	City    *string `json:"city,omitempty"`
}

// Mutations available in the API.
type Mutation struct {
}

// Represents a participant's response in a round.
type Participant struct {
	User     *User    `json:"user"`
	Response Response `json:"response"`
	Rank     int      `json:"rank"`
}

// Queries available in the API.
type Query struct {
}

// Represents a round of play.
type Round struct {
	ID           string         `json:"id"`
	Title        string         `json:"title"`
	Location     string         `json:"location"`
	EventType    *string        `json:"eventType,omitempty"`
	Date         string         `json:"date"`
	Time         string         `json:"time"`
	Participants []*Participant `json:"participants"`
	Scores       []*Score       `json:"scores"`
	Finalized    bool           `json:"finalized"`
	EditHistory  []*EditLog     `json:"editHistory"`
}

// Input type for scheduling a new round.
type RoundInput struct {
	Title     string  `json:"title"`
	Location  string  `json:"location"`
	EventType *string `json:"eventType,omitempty"`
	Date      string  `json:"date"`
	Time      string  `json:"time"`
}

// Represents a score for a user in a round.
type Score struct {
	UserID string `json:"userID"`
	Score  int    `json:"score"`
}

// Represents a tag associated with a user.
type Tag struct {
	ID           string `json:"id"`
	TagNumber    *int   `json:"tagNumber,omitempty"`
	LastPlayed   string `json:"lastPlayed"`
	DurationHeld *int   `json:"durationHeld,omitempty"`
	Name         string `json:"name"`
	Position     int    `json:"position"`
}

// Represents a user in the system.
type User struct {
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	DiscordID string   `json:"discordID"`
	TagNumber *int     `json:"tagNumber,omitempty"`
	Rounds    []*Round `json:"rounds"`
	Role      string   `json:"role"`
}

// Input type for creating a new user.
type UserInput struct {
	Name      string `json:"name"`
	DiscordID string `json:"discordID"`
}

// Represents the response of a participant.
type Response string

const (
	ResponseAccept    Response = "ACCEPT"
	ResponseTentative Response = "TENTATIVE"
	ResponseDecline   Response = "DECLINE"
)

var AllResponse = []Response{
	ResponseAccept,
	ResponseTentative,
	ResponseDecline,
}

func (e Response) IsValid() bool {
	switch e {
	case ResponseAccept, ResponseTentative, ResponseDecline:
		return true
	}
	return false
}

func (e Response) String() string {
	return string(e)
}

func (e *Response) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Response(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Response", str)
	}
	return nil
}

func (e Response) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
